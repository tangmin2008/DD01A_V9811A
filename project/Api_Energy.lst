C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE API_ENERGY
OBJECT MODULE PLACED IN .\Api_Energy.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S3_ApiPlat\Api_Energy.c LARGE BROWSE INCDIR(..\C_Source\S0_Syst
                    -em;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_ApiProtocol;
                    -..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_HardDrv\E2P
                    -_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Api_Energy.lst) OBJECT(.\Api_Energy.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Api_Energy.C
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : 电能计量应用层相关函数C文件
   9          **note                  : MERTER FOR DL06A
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-20   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          
  19          #include <MyIncludes_H.h>
  20          
  21          
  22          
  23          
  24          ENERGY_USER_DATA    gs_energy_user_data;            //当前电量RAM主数据  //
  25          ENERGY_USER_DATA    gs_energy_user_data_back;   //当前电量RAM备份数据 //
  26          ENERGY_VAR                    gs_energy_var;                 // 电能增量脉冲变量数据，上电初始化为0  //
  27          
  28          
  29          /*****************************************************************************
  30          ** Function name    :api_init_current_energy_data_ram
  31          **
  32          ** Description         :初始化当前电量RAM区数据，程序复位初始化调用        
  33          **
  34          ** Parameters         :NONE          
  35          **
  36          ** Returned value   :NONE
  37          **
  38          **----------------------------------------------------------------------------
  39          ** V01.01  MJ  2016-04-23
  40          ******************************************************************************/
  41          void api_init_current_energy_data_ram(void)
  42          {
  43   1      //定义变量
  44   1      //      uint8 Bill_Data;
  45   1              uint8 i;
  46   1              ST_U16_U08 u16_month_A,u16_month_B;
  47   1      //      ST_U16_U08 u16_day_A,u16_day_B;
  48   1              uint8 last_rec_dateTime[6];//最近一次冻结时间
  49   1              uint8 max_dateTime;
  50   1      ////////
  51   1          Lib_Set_String(&gs_energy_user_data.us_val[0][0].buf[0],0,sizeof(ENERGY_USER_DATA));
  52   1          Lib_Set_String(&gs_energy_user_data_back.us_val[0][0].buf[0],0,sizeof(ENERGY_USER_DATA));
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 2   

  53   1          api_check_current_energy_data(); 
  54   1      
  55   1              mem_read(&Bill_Data, ADR_BLOCK20_METER_PARAM1_E2P+ST_MB_OFFSET(E2P_METER_PARAM1_MAP,BILL_FLAG), 1, MEM_E2
             -P1);
  56   1              //校验和不对就从EEP读取数据
  57   1              mem_read(&energy_data_array[0].buf[0],ADR_BLOCK_4Energy_L0_E2P,  5*LEN_EC_UNIT,MEM_E2P1);
  58   1              mem_read(&st_mmd_unit_array[0].buf[0],ADR_BLOCK_4MMD_L0_E2P,5*LEN_NEW_MMD_UNIT,MEM_E2P1);
  59   1              mem_read(&sum_st_mmd_unit_array[0].buf[0],ADR_BLOCK_4MMD_sum_L0_E2P,5*LEN_SUM_MMD_UNIT,MEM_E2P1);
  60   1              d_flag = 0;
  61   1      
  62   1              //校验日冻结RAM数据 2019-01-25
  63   1      //      Excsck = 0;
  64   1      //      Excsck += Lib_get_csck_int16u_num(&energy_data_array[0].buf[0],5*LEN_EC_UNIT,CHECKWORD); 
  65   1      //      Excsck += Lib_get_csck_int16u_num(&st_mmd_unit_array[0].buf[0],5*LEN_NEW_MMD_UNIT,CHECKWORD);
  66   1      //      Excsck += Lib_get_csck_int16u_num(&sum_st_mmd_unit_array[0].buf[0],5*LEN_SUM_MMD_UNIT,CHECKWORD);
  67   1      //      if(csck == Excsck)
  68   1      //      {
  69   1      //              mem_read(&last_rec_dateTime[0],ADR_BLOCK_4MMD_L0_E2P+4,5,MEM_E2P1);//年月日时分
  70   1      //              //2019-01-25 cxy  将当前电量读出并写入RAM区
  71   1      //              mem_read(&energy_data_array[0].buf[0],&gs_energy_user_data_back.us_val[0][0].buf[0], LEN_EC_CURRENT, M
             -EM_RAM);
  72   1      //              //2019-01-25 cxy  上电将RAM区日冻结数据写入EEP  
  73   1      //              mem_write(ADR_BLOCK_4Energy_L0_E2P,&energy_data_array[0].buf[0],5*LEN_EC_UNIT,MEM_E2P1);
  74   1      //              mem_write(ADR_BLOCK_4MMD_L0_E2P,&st_mmd_unit_array[0].buf[0],5*LEN_NEW_MMD_UNIT,MEM_E2P1);
  75   1      //              mem_write(ADR_BLOCK_4MMD_sum_L0_E2P,&sum_st_mmd_unit_array[0].buf[0],5*LEN_SUM_MMD_UNIT,MEM_E2P1);
  76   1      //              
  77   1      //              //计算掉电过了几个零点
  78   1                      mem_read(&last_rec_dateTime[0],ADR_BLOCK161_EVENII_PWN_E2P+6,5,MEM_E2P1);//年月日时分
  79   1                      u16_month_A.u16 = Lib_bcd_byte(last_rec_dateTime[0])*12+ Lib_bcd_byte(last_rec_dateTime[1]);//几个月
  80   1                      u16_month_B.u16 = Lib_bcd_byte(gs_CurDateTime.Year)*12 + Lib_bcd_byte(gs_CurDateTime.Month);
  81   1                      CLRWDT();
  82   1                      if(u16_month_B.u16 >= u16_month_A.u16)
  83   1                      {
  84   2                              if(u16_month_B.u16 - u16_month_A.u16 > 1)
  85   2                              {
  86   3                                       max_dateTime = 6;
  87   3                              }
  88   2                              else
  89   2                              {
  90   3                                      if(u16_month_B.u16 - u16_month_A.u16 == 1)
  91   3                                              max_dateTime = Judage_Month(last_rec_dateTime[1],last_rec_dateTime[0])-last_rec_dateTime[2]+gs_CurDat
             -eTime.Day;
  92   3                                      else
  93   3                                              max_dateTime = gs_CurDateTime.Day -last_rec_dateTime[2];
  94   3                              }
  95   2                              //读取结算方式  2019-01-30
  96   2      //                      mem_read(&Bill_Data, ADR_BLOCK20_METER_PARAM1_E2P+ST_MB_OFFSET(E2P_METER_PARAM1_MAP,BILL_FLAG), 1, ME
             -M_E2P1);
  97   2              
  98   2                              if(Bill_Data == 0x01)
  99   2                              {
 100   3                                      if(max_dateTime > 0 && max_dateTime <=12)
 101   3                                      {
 102   4                                              CLRWDT();
 103   4                                              for(i=0;i<max_dateTime ;i++)
 104   4                                              {
 105   5                                                      api_write_bill_data(BILL_ID0_MOTTH_SETTL);
 106   5                                                      CLRWDT();
 107   5                                              }
 108   4                                              CLRWDT();
 109   4                                              api_clr_current_MD_data();
 110   4              //                              sum_st_mmd_unit_array[0].val.val_count--;  //多加一次
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 3   

 111   4                                              CLRWDT();
 112   4                                      }
 113   3                              }
 114   2      //                      if(Bill_Data == 0x30)
 115   2      //                      {
 116   2      //                              //补月结算
 117   2      //                              #if (BILL_MAX_NUM>1)
 118   2      //                                      api_handl_settle_when_powerUp();   
 119   2      //                              #endif
 120   2      //                      }
 121   2                      }
 122   1      //      }
 123   1      //      else
 124   1      //      {       
 125   1      
 126   1      //  }
 127   1      
 128   1              // 两三特殊//
 129   1          gs_energy_var.pluse[0] = 0;
 130   1      }
 131          
 132          /*****************************************************************************
 133          ** Function name    :api_check_current_energy_data
 134          **
 135          ** Description         :当前电能数据的检查处理，电能累计函数调用
 136          **
 137          ** Parameters         :NONE          
 138          **
 139          ** Returned value   :NONE
 140          **
 141          **----------------------------------------------------------------------------
 142          ** V01.01  MJ  2016-04-23
 143          ******************************************************************************/
 144          void api_check_current_energy_data(void)
 145          {   
 146   1          INT16U csck_tmp;
 147   1       
 148   1          //电能数据获取  //   
 149   1          csck_tmp = Lib_get_csck_int16u_num(&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CURRENT,CHECKWORD);
 150   1          if(csck_tmp != gs_energy_user_data.u16_csck) 
 151   1          {
 152   2              csck_tmp = Lib_get_csck_int16u_num(&gs_energy_user_data_back.us_val[0][0].buf[0],LEN_EC_CURRENT,CH
             -ECKWORD);        
 153   2                      if(csck_tmp != gs_energy_user_data_back.u16_csck) 
 154   2              {
 155   3                  mem_read(&gs_energy_user_data_back.us_val[0][0].buf[0], ADR_BLOCK00_EC_L0_E2P, LEN_EC_CURRENT,
             - MEM_E2P1);
 156   3                  gs_energy_user_data_back.u16_csck = Lib_get_csck_int16u_num(&gs_energy_user_data_back.us_val[0
             -][0].buf[0],LEN_EC_CURRENT,CHECKWORD);
 157   3                              /*
 158   3                              mem_read(&gs_energy_user_data_back.us_val[0][0].buf[0], ADR_BLOCK00_EC_L0_E2P, (LEN_EC_CURRENT+2), MEM_
             -E2P1);
 159   3                              csck_tmp= Lib_get_csck_int16u_num(&gs_energy_user_data_back.us_val[0][0].buf[0],LEN_EC_CURRENT,CHECKWOR
             -D);
 160   3                              if(csck_tmp != gs_energy_user_data_back.u16_csck)
 161   3                              {
 162   3                                      Lib_Set_String(&gs_energy_user_data.us_val[0][0].buf[0],0,sizeof(ENERGY_USER_DATA));
 163   3                                      Lib_Set_String(&gs_energy_user_data_back.us_val[0][0].buf[0],0,sizeof(ENERGY_USER_DATA));
 164   3                              }
 165   3                              */
 166   3              }
 167   2              Lib_Copy_Str_TwoArry(&gs_energy_user_data.us_val[0][0].buf[0],&gs_energy_user_data_back.us_val[0][
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 4   

             -0].buf[0],LEN_EC_CURRENT);
 168   2              gs_energy_user_data.u16_csck = gs_energy_user_data_back.u16_csck;       
 169   2          }
 170   1      }
 171          
 172          /*****************************************************************************
 173          ** Function name    :lnk_inc_energy_pluse
 174          **
 175          ** Description         :当前有功电能脉冲增量处理，安装定义的通道进行累计    
 176          **
 177          ** Parameters         :NONE          
 178          **
 179          ** Returned value   :NONE
 180          **
 181          **----------------------------------------------------------------------------
 182          ** V01.01  MJ  2016-04-23
 183          ******************************************************************************/
 184          uint8 lnk_add_fac_energy_pluse(void)
 185          {
 186   1      
 187   1        uint8 chg_fg=FALSE; 
 188   1        uint8 u8_tmp,i;
 189   1              
 190   1        for (i=0; i<EC_CH_NUM; i++)
 191   1        {        
 192   2                if(gs_energy_var.pluse[i]>0)
 193   2                {
 194   3                        DisableINT();                                 // disable interrupt function  //
 195   3                        u8_tmp = gs_energy_var.pluse[i];
 196   3                        gs_energy_var.pluse[i] =0;  //有功脉冲清零处理 //
 197   3                        EnableINT();
 198   3                      
 199   3                        gs_energy_user_data.us_val[i][0].val.decim_hex16 += u8_tmp;  // 总累加        组合不累加//
 200   3                        #if (TARIFF_MAX_NUM>1)
 201   3                        gs_energy_user_data.us_val[i][EN_TRIFF_no].val.decim_hex16 += u8_tmp; //  组合不累加//
 202   3                        #endif
 203   3                        chg_fg = TRUE;
 204   3                }
 205   2              }
 206   1              
 207   1               return (chg_fg);
 208   1      }
 209          
 210          
 211          
 212          /*****************************************************************************
 213          ** Function name    :lnk_inc_energy_pluse
 214          **
 215          ** Description         :当前无功功电能脉冲增量处理，安装定义的通道进行累计    
 216          **
 217          ** Parameters         :NONE          
 218          **
 219          ** Returned value   :NONE
 220          **
 221          **----------------------------------------------------------------------------
 222          ** V01.01  MJ  2016-04-23
 223          ******************************************************************************/
 224          uint8 lnk_add_rac_energy_pluse(void)
 225          {
 226   1      
 227   1      uint8 chg_fg=FALSE;
 228   1              /*
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 5   

 229   1              uint8 u8_tmp;
 230   1      
 231   1              //象限模式字获取，两相不判断象限只判断正反相  0x0F为1234象限 正反相
 232   1              mem_read(&gs_sys_globaL_var.Rac_energy[0], ADR_METER_PARAM1_REC_ENERGY, 2, MEM_E2P1);   
 233   1              if(gs_energy_var.pluse[1]>0)
 234   1              {
 235   1                      DisableINT();                                   // disable interrupt function  //
 236   1                      u8_tmp = gs_energy_var.pluse[1];
 237   1                      gs_energy_var.pluse[1] =0;  //有功脉冲清零处理 //
 238   1                      EnableINT();
 239   1      
 240   1              if((gs_sys_globaL_var.Rac_energy[1]&0x0F)==0x06) //2、3不累加 1、4 象限累加 正向累加
 241   1                      {
 242   1                        if((gs_emu_run_var.net_flg&REV_TT_RACPOWER)==0)
 243   1                        {
 244   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][0].val.decim_hex16 += u8_tmp;  // 总累加  组合不累加//
 245   1                         #if (TARIFF_MAX_NUM>1)
 246   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][EN_TRIFF_no].val.decim_hex16 += u8_tmp; //  组合不累加//
 247   1                         #endif
 248   1                        }
 249   1                       chg_fg = TRUE;
 250   1                      }
 251   1                      else if((gs_sys_globaL_var.Rac_energy[1]&0x0F)==0x09)  //1、4象限不累加。2、3象限累加  反向累加//
 252   1                      {
 253   1                        if(gs_emu_run_var.net_flg&REV_TT_RACPOWER)
 254   1                        {
 255   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][0].val.decim_hex16 += u8_tmp;  // 总累加  组合不累加//
 256   1                         #if (TARIFF_MAX_NUM>1)
 257   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][EN_TRIFF_no].val.decim_hex16 += u8_tmp; //  组合不累加//
 258   1                         #endif
 259   1                        }
 260   1                       chg_fg = TRUE;
 261   1                      }
 262   1                      else //默认总  合相正反累加
 263   1                      {
 264   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][0].val.decim_hex16 += u8_tmp;  // 总累加  组合不累加//
 265   1                         #if (TARIFF_MAX_NUM>1)
 266   1                         gs_energy_user_data.us_val[EC_CH_RE_PT_TT][EN_TRIFF_no].val.decim_hex16 += u8_tmp; //  组合不累加//
 267   1                         #endif
 268   1                         chg_fg = TRUE;
 269   1                      }
 270   1                      
 271   1                      if(gs_emu_run_var.net_flg&REV_TT_RACPOWER)
 272   1                      {
 273   1                                gs_energy_user_data.us_val[EC_REV_REC_NUM][0].val.decim_hex16 += u8_tmp; // 反向累加
 274   1                         #if (TARIFF_MAX_NUM>1)
 275   1                            gs_energy_user_data.us_val[EC_REV_REC_NUM][EN_TRIFF_no].val.decim_hex16 += u8_tmp; // 反向累加
 276   1                         #endif
 277   1                      }
 278   1                      else 
 279   1                      {
 280   1                                gs_energy_user_data.us_val[EC_FOR_REC_NUM][0].val.decim_hex16 += u8_tmp;//正向累加
 281   1                         #if (TARIFF_MAX_NUM>1)
 282   1                            gs_energy_user_data.us_val[EC_FOR_REC_NUM][EN_TRIFF_no].val.decim_hex16 += u8_tmp;//正向累加
 283   1                         #endif
 284   1                      }
 285   1              }
 286   1      */
 287   1               return (chg_fg);
 288   1      }
 289          
 290          /*****************************************************************************
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 6   

 291          ** Function name    :api_accum_current_energy_data_pre_second
 292          **
 293          ** Description         :当前电能数据累计处理，每秒调用
 294          **
 295          ** Parameters         :NONE          
 296          **
 297          ** Returned value   :NONE
 298          **
 299          **----------------------------------------------------------------------------
 300          ** V01.01  MJ  2016-04-23
 301          ******************************************************************************/
 302          void api_accum_current_energy_data_pre_second(void)
 303          {
 304   1              uint8 save_fg=FALSE;
 305   1              uint8 i,chg_fg1;
 306   1      
 307   1          //if(CheckPOWERUP() !=TRUE)   return;  
 308   1              // 电能数据合法性检查 //
 309   1              api_check_current_energy_data();
 310   1              //有功电能脉冲增量处理 //
 311   1              chg_fg1 =lnk_add_fac_energy_pluse(); 
 312   1      
 313   1              if(chg_fg1==FALSE) return; 
 314   1              
 315   1              save_fg=FALSE;
 316   1              for(i=0;i<EC_CH_NUM;i++)
 317   1              {
 318   2                      if(gs_energy_user_data.us_val[i][0].val.decim_hex16>=METER_CONST_1KWH)
 319   2                      {
 320   3                              if(i==0)        save_fg = TRUE;   //暂时不支持无功整度的存取   电能通道1的电量发生整数进位时配置存储标识 //
 321   3                              gs_energy_user_data.us_val[i][0].val.decim_hex16 -= METER_CONST_1KWH;
 322   3                              gs_energy_user_data.us_val[i][0].val.integ_hex32++;
 323   3                              if(gs_energy_user_data.us_val[i][0].val.integ_hex32 > MAX_ENERGY_INtEGER)
 324   3                              {
 325   4                                      gs_energy_user_data.us_val[i][0].val.integ_hex32 = 0;  // 超出最大范围后清理 //
 326   4                              }
 327   3                      }
 328   2                      #if (TARIFF_MAX_NUM>0)
 329   2                      if(gs_energy_user_data.us_val[i][EN_TRIFF_no].val.decim_hex16>=METER_CONST_1KWH)
 330   2                      {
 331   3                              gs_energy_user_data.us_val[i][EN_TRIFF_no].val.decim_hex16 -= METER_CONST_1KWH;
 332   3                              gs_energy_user_data.us_val[i][EN_TRIFF_no].val.integ_hex32++;
 333   3                              if(gs_energy_user_data.us_val[i][EN_TRIFF_no].val.integ_hex32 > MAX_ENERGY_INtEGER)
 334   3                              {
 335   4                                      gs_energy_user_data.us_val[i][EN_TRIFF_no].val.integ_hex32 = 0;  // 超出最大范围后清理 //
 336   4                              }
 337   3                      }               
 338   2                      #endif
 339   2                      
 340   2              }
 341   1              
 342   1              // 更新RAM区电能校验和和备份区数据//
 343   1              gs_energy_user_data.u16_csck = Lib_get_csck_int16u_num(&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CU
             -RRENT,CHECKWORD);  
 344   1              Lib_Copy_Str_TwoArry(&gs_energy_user_data_back.us_val[0][0].buf[0],&gs_energy_user_data.us_val[0][0].buf[
             -0],LEN_EC_E2P);
 345   1      
 346   1              // 电能数据保存 //
 347   1              if(save_fg == TRUE)
 348   1              {
 349   2                      mem_db_write(ADR_BLOCK00_EC_L0_E2P,&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CURRENT,MEM_E2P1);
 350   2              }
C51 COMPILER V9.01   API_ENERGY                                                            04/08/2019 10:12:12 PAGE 7   

 351   1      }
 352          
 353          
 354          
 355          /*****************************************************************************
 356          ** Function name    :api_clr_current_energy_data
 357          **
 358          ** Description         :当前电能数据的清零处理
 359          **
 360          ** Parameters         :NONE          
 361          **
 362          ** Returned value   :NONE
 363          **
 364          **----------------------------------------------------------------------------
 365          ** V01.01  MJ  2016-04-23
 366          ******************************************************************************/
 367          void api_clr_current_energy_data(void)
 368          {
 369   1              // 清除当前电量数据的RAM主区数据 //
 370   1              Lib_Set_String(&gs_energy_user_data.us_val[0][0].buf[0],0,LEN_EC_CURRENT);
 371   1              gs_energy_user_data.u16_csck = Lib_get_csck_int16u_num(&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CU
             -RRENT,CHECKWORD);  
 372   1              // 清除当前电量数据的RAM备份区数据 //
 373   1              Lib_Copy_Str_TwoArry(&gs_energy_user_data_back.us_val[0][0].buf[0],&gs_energy_user_data.us_val[0][0].buf[
             -0],LEN_EC_E2P);
 374   1              // 清除当前电量数据的E2P区数据 //
 375   1              mem_db_write(ADR_BLOCK00_EC_L0_E2P,&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_E2P-2,MEM_E2P1);
 376   1      }
 377          
 378          
 379          /***************************************************************
 380          *    END
 381          ****************************************************************/
 382          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1535    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    126      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
