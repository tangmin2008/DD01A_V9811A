C51 COMPILER V9.01   DRV_E2P_24CXXX                                                        04/16/2019 21:42:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DRV_E2P_24CXXX
OBJECT MODULE PLACED IN .\Drv_E2P_24CXXX.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S1_HardDrv\E2P_24CXXX\Drv_E2P_24CXXX.c LARGE BROWSE INCDIR(..\C
                    -_Source\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\
                    -S5_ApiProtocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source
                    -\S1_HardDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Drv_E2P_24CXXX.lst) OBJECT(.\Drv_E2P_24CXXX.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Drv_E2P_FM24c16.c
   6          **Author                : maji
   7          **date                  : 2016-04-20
   8          **description   : c code for read&Write FM24C16(铁电)
   9          **note                  :  Driver code for GENERAL
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-20   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          /*******************************************************************************************
  22          ** 函数名称: Read_EEPROM_Page_Sub
  23          ** 函数描述: 从EEPROM读取若干字节 （在1个PAGE的范围内操作）
  24          ** 输入参数: *Buf:目标据RAM数据首地址指针
  25          **           Addr:源数据EEPROM存储地址
  26          **           Len: 读取的字节数
  27          ** 输出参数: TRUE-读取正确   FALSE-读取失败
  28          ** 说明    : 在1个PAGE的范围内操作使用，无双读比对冗错机制
  29          *******************************************************************************************/
  30          uint8 Read_EEPROM_Page_Sub(uint8 *Buf,uint16 Addr,uint8 Len)
  31          {
  32   1              uint8 NewWrCmd,NewRdCmd;
  33   1              #if (EE_Chip>=EE24XX08 )
                      uint8 Page;
                      #endif
  36   1              uint8 err_cnt=0;
  37   1                 
  38   1      
  39   1              #if (EE_Chip>=EE24XX08 )
              
                      Page=HIBYTE(Addr);
                      Page=Page&Bin(00000111);
                      Page=Page<<1;
                      NewWrCmd=WRITE_EEPROM_CMD|Page;
                      NewRdCmd=READ_EEPROM_CMD|Page;
                      #else
  47   1              NewWrCmd=WRITE_EEPROM_CMD;
  48   1              NewRdCmd=READ_EEPROM_CMD;
  49   1              #endif
  50   1      
  51   1              do
  52   1              {
C51 COMPILER V9.01   DRV_E2P_24CXXX                                                        04/16/2019 21:42:02 PAGE 2   

  53   2                      E2p_Stop_i2c();
  54   2                      err_cnt++;
  55   2                      if(err_cnt>10)  return FALSE;   // 重试10次不能成功则返回失败标识//
  56   2                      E2p_Start_i2c();
  57   2              }while (E2p_TxByte_i2c(NewWrCmd)!=TRUE);
  58   1      
  59   1              #if (EE_Chip>=EE24XX08 )
                      if(E2p_TxByte_i2c(LOBYTE(Addr))!=TRUE) return FALSE;
                      #else
  62   1              if(E2p_TxByte_i2c(HIBYTE(Addr))!=TRUE) return FALSE;
  63   1              if(E2p_TxByte_i2c(LOBYTE(Addr))!=TRUE) return FALSE;
  64   1              #endif
  65   1      
  66   1              E2p_Start_i2c();                                           //重发启始条件  //
  67   1      
  68   1              if(E2p_TxByte_i2c(NewRdCmd)!=TRUE) return FALSE;
  69   1      
  70   1              while(Len--)
  71   1              {
  72   2                      *Buf = E2p_RxByte_i2c((Len==0)? FALSE: TRUE);           //读出数据内容  //
  73   2                      Buf++;
  74   2              }
  75   1              E2p_Stop_i2c();
  76   1              return TRUE;
  77   1      }
  78          
  79          /*******************************************************************************************
  80          ** 函数名称: Write_EEPROM_Page_Sub
  81          ** 函数描述: 从EEPROM写入若干字节 （在1个PAGE的范围内操作）
  82          ** 输入参数: addr:目标数据EEPROM存储地址
  83          **           *buf:源数据RAM数据首地址指针
  84          **           len: 写入的字节数
  85          ** 输出参数: TRUE-写入正确   FALSE-写入失败
  86          ** 说明    : 在1个PAGE的范围内操作使用，无写入读出比对冗错机制
  87          *******************************************************************************************/
  88          uint8 Write_EEPROM_Page_Sub(uint16 Addr,uint8 *Buf,uint8 Len)
  89          {
  90   1              uint8 NewWrCmd,NewRdCmd;
  91   1      
  92   1              #if (EE_Chip>=EE24XX08 )
                      uint8 Page;
                      #endif
  95   1              uint8 err_cnt=0;
  96   1      
  97   1              #if (EE_Chip>=EE24XX08 )
                      Page=HIBYTE(Addr);
                      Page=Page&Bin(00000111);
                      Page=Page<<1;
                      NewWrCmd=WRITE_EEPROM_CMD|Page;
                      NewRdCmd=READ_EEPROM_CMD|Page;
                      #else
 104   1              NewWrCmd=WRITE_EEPROM_CMD;
 105   1              NewRdCmd=READ_EEPROM_CMD;
 106   1              #endif
 107   1      
 108   1              Disable_WP();
 109   1              do
 110   1              {
 111   2                      E2p_Stop_i2c();
 112   2                      err_cnt++;
 113   2                      if(err_cnt>10)  return FALSE;   // 重试10次不能成功则返回失败标识//
 114   2                      E2p_Start_i2c();
C51 COMPILER V9.01   DRV_E2P_24CXXX                                                        04/16/2019 21:42:02 PAGE 3   

 115   2              }while (E2p_TxByte_i2c(NewWrCmd)!=TRUE);
 116   1      
 117   1              #if (EE_Chip>=EE24XX08 )
                      if(E2p_TxByte_i2c(LOBYTE(Addr))!=TRUE) return FALSE;
                      #else
 120   1              if(E2p_TxByte_i2c(HIBYTE(Addr))!=TRUE) return FALSE;
 121   1              if(E2p_TxByte_i2c(LOBYTE(Addr))!=TRUE) return FALSE;
 122   1              #endif
 123   1      
 124   1              do
 125   1              {
 126   2                      if (E2p_TxByte_i2c(*Buf)!=TRUE )
 127   2                      {
 128   3                              Enable_WP();
 129   3                              return FALSE;
 130   3                      }
 131   2                      Buf++;
 132   2                      Addr++;
 133   2                      Len--;
 134   2              }while (Len != 0) ;
 135   1      
 136   1              E2p_Stop_i2c();
 137   1              #ifdef _E2P_TYPE_AT24
 138   1              Lib_Delay_ms(5);   //  普通E2P写入后需要延时5ms//                       
 139   1              #endif
 140   1              Enable_WP();
 141   1      
 142   1              return TRUE;
 143   1      }
 144          
 145          
 146          
 147          /*******************************************************************************************
 148          ** 函数名称: Read_EEPROM_Page
 149          ** 函数描述: 从EEPROM读取若干字节 （在1个PAGE的范围内操作并带双读比对）
 150          ** 输入参数: * u8p_dst:目标数据指针
 151          **           u16_src:  源数据EEPROM存储地址
 152          **           u8_len: 读取的字节数
 153          ** 输出参数: TRUE-读取正确   FALSE-读取失败
 154          ** 说明    : 在1个PAGE的范围内操作使用，具备双读比对冗错机制
 155          **           失败情况下最大可以重试3次
 156          *******************************************************************************************/
 157          uint8 Read_EEPROM_Page(uint8* u8p_dst, uint16 u16_src, uint8 u8_len)
 158          {
 159   1       uint8 data00[EE_PageMask];
 160   1       uint8 i;
 161   1        
 162   1              if((u8_len<= 0)||(u8_len>EE_PageMask))     //if len is illegal,program run with dead circle
 163   1              {
 164   2                      return(FALSE); 
 165   2              }
 166   1              for(i=0;i<3;i++)                                                 //read and compare, if error,repeat 6 ti
             -mes.
 167   1              {
 168   2                      Read_EEPROM_Page_Sub(&data00[0],u16_src , u8_len); 
 169   2                      Read_EEPROM_Page_Sub(u8p_dst, u16_src, u8_len);
 170   2                      if(Lib_Cmp_TwoArry(u8p_dst,&data00[0],u8_len)==0)  return (TRUE);  
 171   2              }
 172   1              return(FALSE);
 173   1      }
 174          
 175          
C51 COMPILER V9.01   DRV_E2P_24CXXX                                                        04/16/2019 21:42:02 PAGE 4   

 176          /*******************************************************************************************
 177          ** 函数名称: Write_EEPROM_Page
 178          ** 函数描述: 从EEPROM读取若干字节 （在1个PAGE的范围内操作并带写入读出比对）
 179          ** 输入参数: u16_dst:   目标数据EEPROM存储地址
 180          **           *u8p_src:  源数据RAM数据首地址指针
 181          **           u8_len: 写入的字节数
 182          ** 输出参数: TRUE-写入正确   FALSE-写入失败
 183          ** 说明    : 在1个PAGE的范围内操作使用，具备写入读出比对冗错机制
 184          **           失败情况下最大可以重试3次
 185          *******************************************************************************************/
 186          uint8 Write_EEPROM_Page(uint16 u16_dst, uint8 *u8p_src, uint8 u8_len)
 187          {
 188   1       uint8 data00[EE_PageMask];
 189   1       uint8 i;
 190   1        
 191   1         if((u8_len<= 0)||(u8_len>EE_PageMask))                                    //if len is illegal,program r
             -un with dead circle
 192   1         {
 193   2             sys_err();
 194   2         }
 195   1         for(i=0;i<3;i++)                                                           //write and read compare, if
             - error,repeat 3 times.
 196   1         {
 197   2             Write_EEPROM_Page_Sub(u16_dst, u8p_src, u8_len);
 198   2             Read_EEPROM_Page_Sub(&data00[0], u16_dst , u8_len); 
 199   2             if(Lib_Cmp_TwoArry(u8p_src,&data00[0],u8_len)== 0 )  return (TRUE);  
 200   2         }
 201   1         return(FALSE);
 202   1      }
 203          
 204          
 205          /*******************************************************************************************
 206          ** 函数名称: Read_EEPROM
 207          ** 函数描述: 从EEPROM读取若干字节 （实现任意位置起始的16位字节长度数据读取）
 208          ** 输入参数: * u8p_dst:目标数据指针
 209          **           u16_src:  源数据EEPROM存储地址
 210          **           u16_len: 读取的字节数
 211          ** 输出参数: TRUE-读取正确   FALSE-读取失败
 212          ** 说明    : 无起始位置的限制，
 213          **           读取长度为16位字节
 214          **           自动实现跨页读出处理，并带有两次读出比对功能
 215          *******************************************************************************************/
 216          uint8 Read_EEPROM(uint8* u8p_dst, uint16 u16_src, uint16 u16_len)
 217          {
 218   1       uint8 tmp;
 219   1       uint8 u8_lenth;
 220   1      
 221   1              while( u16_len > 0 )
 222   1              {
 223   2                      tmp = (INT8U)(u16_src & (EE_PageMask -1));      // 源数据 在页当中的地址。 //
 224   2                      if( tmp != 0 ) 
 225   2                      {
 226   3                              u8_lenth = EE_PageMask - tmp;                           // 源数据首地址 到页尾的  长度 //
 227   3                      }
 228   2                      else 
 229   2                      {
 230   3                              u8_lenth = EE_PageMask;
 231   3                      }
 232   2                      if( u16_len < u8_lenth ) u8_lenth = u16_len;                                     // 
 233   2      
 234   2                      if(Read_EEPROM_Page(u8p_dst, u16_src, u8_lenth) == FALSE)  return(FALSE);
 235   2                      u8p_dst += u8_lenth;
C51 COMPILER V9.01   DRV_E2P_24CXXX                                                        04/16/2019 21:42:02 PAGE 5   

 236   2                      u16_src += u8_lenth;
 237   2                      u16_len -= u8_lenth;
 238   2              } 
 239   1              return (TRUE);  
 240   1      }
 241          
 242          /*******************************************************************************************
 243          ** 函数名称: Write_EEPROM_Page
 244          ** 函数描述: 从EEPROM读取若干字节 （实现任意位置起始的16位字节长度数据写入）
 245          ** 输入参数: u16_dst:   目标数据EEPROM存储地址
 246          **           *u8p_src:  源数据RAM数据首地址指针
 247          **           u16_len: 写入的字节数
 248          ** 输出参数: TRUE-写入正确   FALSE-写入失败
 249          ** 说明    : 无起始位置的限制，
 250          **           读取长度为16位字节
 251          **           自动实现跨页写入处理，并带有写入读出比对功能
 252          *******************************************************************************************/
 253          uint8  Write_EEPROM(uint16 u16_dst, uint8 *u8p_src, uint16 u16_len)
 254          {
 255   1       uint8 tmp;
 256   1       uint8 u8_lenth;
 257   1        
 258   1         while( u16_len > 0 )
 259   1         {
 260   2                      tmp = (INT8U)(u16_dst & (EE_PageMask -1));      // 源数据 在页当中的地址。 //
 261   2                      if( tmp != 0 ) 
 262   2                      {
 263   3                              u8_lenth = EE_PageMask - tmp;                           // 源数据首地址 到页尾的  长度 //
 264   3                      }
 265   2                      else 
 266   2                      {
 267   3                              u8_lenth = EE_PageMask;
 268   3                      }
 269   2                      if( u16_len < u8_lenth ) u8_lenth = u16_len;                                     // 
 270   2      
 271   2      
 272   2             if(Write_EEPROM_Page(u16_dst, u8p_src, u8_lenth)==FALSE)  return(FALSE);
 273   2             u16_dst += u8_lenth;
 274   2             u8p_src += u8_lenth;
 275   2             u16_len -= u8_lenth;
 276   2         } 
 277   1         return (TRUE); 
 278   1      }
 279          
 280          /*******************************************************************************************
 281          **    END
 282          *******************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    932    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     176
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
