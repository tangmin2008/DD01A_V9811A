C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LIB_MYMATH
OBJECT MODULE PLACED IN .\Lib_myMath.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S2_MyLib\Lib_myMath.c LARGE BROWSE INCDIR(..\C_Source\S0_System
                    -;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_ApiProtocol;..
                    -\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_HardDrv\E2P_2
                    -4CXXX) DEBUG OBJECTEXTEND PRINT(.\Lib_myMath.lst) OBJECT(.\Lib_myMath.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name: Lib_myMath.c
   6          **Author: maji
   7          **date: 
   8          **description: c code for general library function 
   9          **note: memer type  DJ04A
  10          **--------------------Version History -------------------------------------
  11          ** NO.  Date                    Ver             By                      Description 
  12          **==============================================================
  13          ** 1            2014-07-08              0.1                     sosomj                          1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          const INT8U MonTab[13] = 
  22          {
  23                  0,31,28,31,30,31,30,31,31,30,31,30,31
  24          };
  25          
  26          const INT16U DayTab[13] = 
  27          {
  28                  0,0,31,59,90,120,151,181,212,243,273,304,334 
  29          };
  30          //周日，一~六 对应 0~6
  31          const char DefaultData[]={0,0,0,1,1,9,4}; //秒 分 时 日 月 年 周
  32          
  33          
  34          /**********************************************************************
  35           turn byte data to BCD data
  36          **********************************************************************/
  37          INT8U Lib_byte_bcd(INT8U xx)
  38          {
  39   1         if( xx > 99 ) return 0x00;
  40   1         return( xx/10*0x10 + xx%10 );
  41   1      }
  42          
  43          /**********************************************************************
  44           turn BCD data to byte data
  45          **********************************************************************/
  46          INT8U Lib_bcd_byte(INT8U xx)
  47          {
  48   1         return(((xx>>4)&0x0F)*10+(xx&0x0F));
  49   1      }
  50          
  51          //**********************************************************************
  52          // turn word data to BCD2 data
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 2   

  53          //**********************************************************************
  54          void Lib_word_bcd2( INT8U *ptr, INT16U xx )
  55          {
  56   1         if( xx > 9999 ) 
  57   1         {
  58   2            *(ptr+1) = 0x00;
  59   2            *ptr = 0x00;
  60   2            return;
  61   2         }
  62   1      
  63   1      #ifdef LITTLE_END
                 *(ptr+1) = Lib_byte_bcd( (INT8U)(xx/100) );
                 *(ptr) =Lib_byte_bcd( (INT8U)(xx%100) );
              #else
  67   1         *(ptr) = Lib_byte_bcd( (INT8U)(xx/100) );
  68   1         *(ptr+1) =Lib_byte_bcd( (INT8U)(xx%100) );
  69   1      #endif
  70   1      
  71   1      }
  72          
  73          //**********************************************************************
  74          // turn  BCD2 data to  word data 
  75          //**********************************************************************
  76          INT16U Lib_bcd2_word(INT8U* ptr)
  77          {
  78   1      #ifdef LITTLE_END
                 return(  (INT16U)Lib_bcd_byte(*(ptr))+
                          (INT16U)Lib_bcd_byte(*(ptr+1))*100 );
              #else
  82   1         return(  (INT16U)Lib_bcd_byte(*(ptr+1))+
  83   1                  (INT16U)Lib_bcd_byte(*(ptr))*100 );
  84   1      #endif
  85   1      
  86   1      }
  87          
  88          //**********************************************************************
  89          // turn long data to BCD4 data
  90          //**********************************************************************
  91          void Lib_long_bcd4(INT8U* ptr, INT32U xx)
  92          {
  93   1              if( xx > 99999999 ) 
  94   1              {
  95   2              *(ptr+3) = 0x00;
  96   2              *(ptr+2) = 0x00;
  97   2              *(ptr+1) = 0x00;
  98   2              *ptr = 0x00;
  99   2              return;
 100   2              }
 101   1      
 102   1      #ifdef LITTLE_END
                      Lib_word_bcd2(ptr+2, xx/10000);
                      Lib_word_bcd2(ptr, xx%10000);
              #else
 106   1              Lib_word_bcd2(ptr, xx/10000);
 107   1              Lib_word_bcd2(ptr+2, xx%10000);
 108   1      #endif
 109   1      
 110   1      
 111   1      } 
 112          
 113          //**********************************************************************
 114          // turn BCD4 data to long data
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 3   

 115          //**********************************************************************
 116          INT32U Lib_bcd4_long( INT8U* ptr )
 117          {
 118   1      #ifdef LITTLE_END
                      return ( Lib_bcd_byte(*(ptr+0))+ (INT32U)(Lib_bcd_byte(*(ptr+1)))*100+ (INT32U)(Lib_bcd_byte(*(ptr+2)))*1
             -0000+(INT32U)(Lib_bcd_byte(*(ptr+3)))*1000000 );
              #else
 121   1              return ( Lib_bcd_byte(*(ptr+3))+ (INT32U)(Lib_bcd_byte(*(ptr+2)))*100+ (INT32U)(Lib_bcd_byte(*(ptr+1)))*1
             -0000+(INT32U)(Lib_bcd_byte(*(ptr+0)))*1000000 );
 122   1      #endif
 123   1      
 124   1      
 125   1      }
 126          
 127          
 128          /******************************************************************
 129          *
 130          *
 131          *******************************************************************/
 132          void Lib_bcd_inc ( INT8U* ptr )
 133          {
 134   1              
 135   1              (*ptr)++;
 136   1              if( (*ptr & 0x0f) >= 0x0A )
 137   1              {
 138   2                      (*ptr) &=~ 0x0f;
 139   2                      *ptr+=0x10;
 140   2                      if( ((*ptr>>4)&0x0f) >=0x0A )   *ptr =0;
 141   2              }
 142   1      }
 143          
 144          
 145                  
 146          /******************************************************************
 147          * KEIL C , ptr -->  HIGH ADDR
 148          *
 149          *******************************************************************/
 150          INT8U Lib_bcd_arry_add1(INT8U* ptr, INT8U len)
 151          {
 152   1        INT8U result;
 153   1          
 154   1          while(len > 0)
 155   1          {
 156   2              result = 0;
 157   2              Lib_bcd_inc (ptr);
 158   2              if(*ptr != 0)  break;
 159   2              len--;
 160   2              ptr--;
 161   2              result=1;
 162   2          }
 163   1          return (result);
 164   1      }
 165          
 166          
 167          /****************************************************************
 168          Function:       INT16U Lib_get_csck_int16u_num( INT8U *ptr, INT8U len, INT16U key)              
 169          Description:    获取16U格式的数据串的+key的累计校验和
 170          Input:          INT8U *ptr: 校验数据串的首地址
 171                                  INT8U len :  校验数据串的长度
 172                                  INT16U key :  校验数据累计和的KEY                       
 173          Parameters:     
 174          Returns:                INT16U数据，= 数据累加和+KEY
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 4   

 175          Others: 
 176          ****************************************************************/
 177          INT16U Lib_get_csck_int16u_num( INT8U *ptr, INT16U len, INT16U key)
 178          {      
 179   1              while( len > 0 )
 180   1              {
 181   2                  key += *ptr;
 182   2                  ptr++;
 183   2                  len--;
 184   2              }
 185   1              return key;
 186   1      }
 187          
 188          /****************************************************************
 189          Function:       INT8U Lib_get_csck_int8u_num( INT8U *ptr, INT8U len, INT8U key) 
 190          Description:    获取8U格式的数据串的+key的累计校验和
 191          Input:          INT8U *ptr: 校验数据串的首地址
 192                                  INT8U len :  校验数据串的长度
 193                                  INT8U key :  校验数据累计和的KEY                        
 194          Parameters:     
 195          Returns:                INT8U数据，= 数据累加和+KEY
 196          Others: 
 197          ****************************************************************/
 198          INT8U Lib_get_csck_int8u_num( INT8U *ptr, INT16U len, INT8U key)
 199          {      
 200   1              while( len > 0 )
 201   1              {
 202   2                  key += *ptr;
 203   2                  ptr++;
 204   2                  len--;
 205   2              }
 206   1              return key;
 207   1      }
 208          
 209          
 210          /*******************************************************************************************
 211          ** 函数名称: BCDCHK
 212          ** 函数描述: 检查ptr指向的数据区中len个数据是否为BCD码元
 213          ** 输入参数: *ptr :要处理的数据区指针
 214          **           len  :处理的长度
 215          ** 输出参数: TRUE/FALSE 
 216          *******************************************************************************************/
 217          uint8 Lib_BCDCHK(uint8 *ptr,uint8 len)
 218          {       
 219   1              uint8 i;
 220   1              uint8 Temp;             
 221   1      
 222   1              i=0x00;
 223   1              do
 224   1              {               
 225   2                      Temp = *ptr;            
 226   2                      if( (Temp&0x0F)>0x09 || (Temp&0xF0)>0x90 ) return FALSE;                
 227   2                      ptr++;
 228   2                      i++;            
 229   2              }while(i<len);
 230   1      
 231   1              return TRUE;
 232   1      }
 233          
 234          /*********************************************************************
 235          原型：uint GetGmDay( INT8U* Addr )
 236          功能：日期转化为天数，
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 5   

 237          备注：时间基准从00年1月1日算起
 238          *********************************************************************/
 239          INT16U Lib_GetGmDay( INT8U* Addr ) //Addr：日
 240          {
 241   1          INT16U Day,Mon,Year;
 242   1          
 243   1          Year= Lib_bcd_byte(*(Addr+2));
 244   1          Mon = Lib_bcd_byte(*(Addr+1));
 245   1          Day = Lib_bcd_byte(*(Addr)) + DayTab[Mon] + Year*365 + (Year>>2) + 1;//*Year 如果是4，111，移2位还剩1
 246   1          if( ((Year & 0x03) == 0) && (Mon <= 2) ) Day--;//**(Year & 0x03) == 0  闰年。 只算普通年，不包括世纪年
             -。
 247   1          return Day;
 248   1      }
 249          
 250          /*********************************************************************
 251          原型：ulong GetGmHour( INT8U* Addr )
 252          功能：时间转化为小时数，
 253          备注：时间基准从00年1月1日算起
 254          *********************************************************************/
 255          INT32U Lib_GetGmHour( INT8U* Addr )//Addr：时  
 256          {
 257   1          return (INT32U)Lib_bcd_byte(*(Addr))//时
 258   1              + (INT32U)Lib_GetGmDay(Addr+1)*24;//日
 259   1      }
 260          
 261          /*********************************************************************
 262          原型：ulong GetGmMin( INT8U* Addr )
 263          功能：时间转化为分钟，
 264          备注：时间基准从00年1月1日算起
 265          *********************************************************************/
 266          INT32U Lib_GetGmMin( INT8U* Addr ) //Addr：分 
 267          {
 268   1          return (INT32U)Lib_bcd_byte(*(Addr))//分
 269   1              + (INT32U)Lib_GetGmHour(Addr+1)*60;//时
 270   1      }
 271          
 272          /*********************************************************************
 273          原型：ulong GetGmSec( INT8U* Addr )
 274          功能：时间转化为秒，
 275          备注：时间基准从00年1月1日算起
 276          *********************************************************************/
 277          INT32U Lib_GetGmSec( INT8U* Addr ) //Addr：秒
 278          {
 279   1          return (INT32U)Lib_bcd_byte(*(Addr))//秒
 280   1              + (INT32U)Lib_GetGmMin(Addr+1)*60;//分
 281   1      }
 282          
 283          /*****************************************************************************
 284          ** Function name    :Check_RTC_data_FORM
 285          **
 286          ** Description         :检查RTC数据      
 287          **
 288          ** Parameters         :NONE          
 289          **
 290          ** Returned value   :NONE
 291          **
 292          **----------------------------------------------------------------------------
 293          ** V01.01  MJ  2016-04-23
 294          ******************************************************************************/
 295          INT8U Lib_Check_RTC_data_FORM(INT8U* ClkData)
 296          {
 297   1          //WEEKDAY//[0]
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 6   

 298   1          if(ClkData[0] >6) return FALSE;
 299   1              
 300   1          //Year//[1]
 301   1          if(ClkData[1] > 0x99) return FALSE;                 //   || ClkData[1] < 0x07
 302   1          if((ClkData[1] & 0x0F) > 0x09) return FALSE;
 303   1      
 304   1          //Mon//[2]
 305   1          if(ClkData[2] > 0x12 || ClkData[2] < 1) return FALSE;
 306   1          if((ClkData[2] & 0x0F) > 0x09) return FALSE;
 307   1          //Day//[3]
 308   1          if( ClkData[3] < 1 || ClkData[3] > ( ( ( ClkData[2] == 2 ) && ( Lib_bcd_byte(ClkData[1]) & 0x03 ) == 0
             - )? 0x29:Lib_byte_bcd( MonTab[Lib_bcd_byte(ClkData[2])] ) ) )         
 309   1          return FALSE;
 310   1          if((ClkData[3] & 0x0F) > 0x09) return FALSE;
 311   1      
 312   1          //Hour//[4]
 313   1          if(ClkData[4] > 0x23) return FALSE;
 314   1          if((ClkData[4] & 0x0F) > 0x09) return FALSE;
 315   1          //Min//[5]
 316   1          if(ClkData[5] > 0x59) return FALSE;
 317   1          if((ClkData[5] & 0x0F) > 0x09) return FALSE;
 318   1          //Sec//[6]
 319   1          if(ClkData[6] > 0x59) return FALSE;
 320   1          if((ClkData[6] & 0x0F) > 0x09) return FALSE;
 321   1      
 322   1               return TRUE;
 323   1      }
 324          
 325          /*********************************************************************
 326          原型：char GetWeek( void )
 327          功能：获取当前星期
 328          备注：时间基准从00年1月1日星期六 算起
 329          *********************************************************************/
 330          /*
 331          char GetWeek(void)
 332          {
 333                  INT8U buftmp[7];
 334                  Copy_Str_TwoArry(&buftmp[0], &rtc.year, 6);
 335                  //
 336                  Rev_Copy_Arry(&buftmp[0], 6);           //先颠倒顺序 （年月日时分秒->秒分时日月年）
 337              return (char)(( GetGmDay( (uchar*)&buftmp[3]) + REF_WEEK ) % 7);
 338          }
 339          */
 340          
 341          
 342          //**********************************************************************
 343          //   数组的有效数据个数获取函数
 344          //输入: s1 有效数据数组高地址，len有效数据的数组总长度 (字节)
 345          //                ENOB_len:有效数据的最小长度  (asc)
 346          //输出:    输入数组的有效数据位个数
 347          //**********************************************************************
 348          INT8U  Lib_ENOB_Get(INT8U* s1, INT8U len,INT8U ENOB_len)
 349          {
 350   1      INT8U i;
 351   1            for(i=2*len; i>0; i--)
 352   1            {
 353   2                if(i<=ENOB_len) return (i);
 354   2                if(i&0x01)
 355   2                {
 356   3                   if(((*s1)&0x0f) != 0)  return(i);  
 357   3                     s1++;
 358   3                }
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 7   

 359   2                  else
 360   2                  {
 361   3                     if(((*s1)&0xf0) != 0)  return(i);  
 362   3                  }
 363   2            }
 364   1                return 1;
 365   1      }
 366          
 367          
 368          //**********************************************************************
 369          //单字节ASC码数据转BCD码，输出数据范围0:F 
 370          //**********************************************************************
 371          INT8U Lib_AtoB( INT8U Asc ) 
 372          {
 373   1         INT8U Tmp=0x00;
 374   1      
 375   1          if ( Asc >= 0x30 && Asc <= 0x39 )
 376   1              Tmp = Asc - 0x30;
 377   1          else if ( Asc >= 0x41 && Asc <= 0x46 )
 378   1              Tmp = Asc - 0x37;
 379   1          return Tmp;
 380   1      }
 381          
 382          //**********************************************************************
 383          //单字节BCD码数据转ASC码数据，输入数据范围要求0:F        
 384          //**********************************************************************
 385          INT8U  Lib_BtoA( INT8U BCD ) 
 386          {
 387   1         INT8U Tmp=0x00;
 388   1      
 389   1          if ( BCD < 10 )
 390   1              Tmp = BCD + 0x30;
 391   1          else if ( BCD >= 10 )
 392   1              Tmp = BCD + 0x37;
 393   1          return Tmp;
 394   1      }
 395          
 396          //**********************************************************************
 397          //   Turn ASCII to BCD data Lenth是Asc数据的长度 固定为BCD的两倍
 398          //  注:BCD数据和ASC的数据方向相反
 399          //**********************************************************************
 400          void Lib_Asc_BCD( INT8U *BCD, INT8U *Asc, INT8U Lenth )  
 401          {
 402   1          unsigned char i;
 403   1          INT8U *Ptr;
 404   1      
 405   1          for ( i=(Lenth>>1); i>0; i-- )
 406   1          {
 407   2              Ptr = BCD + i - 1;
 408   2              *Ptr = Lib_AtoB( *Asc++ ) << 4;
 409   2              *Ptr += Lib_AtoB( *Asc++ );
 410   2          }
 411   1      }
 412          //**********************************************************************
 413          //      Turn  BCD to ASCII data Lenth是Asc数据的长度 固定为BCD的两倍 
 414          //  注:BCD数据和ASC的数据方向相同
 415          //**********************************************************************
 416          void Lib_Asc_BCDA( INT8U *BCD, INT8U *Asc, unsigned char Lenth ) 
 417          {
 418   1          unsigned char i;
 419   1          INT8U *Ptr;
 420   1      
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 8   

 421   1          Lenth >>= 1;
 422   1          for ( i=0; i<Lenth; i++ )
 423   1          {
 424   2              Ptr = BCD + i ;
 425   2              *Ptr = Lib_AtoB( *Asc++ ) << 4;
 426   2              *Ptr += Lib_AtoB( *Asc++ );
 427   2          }
 428   1      }
 429          //**********************************************************************
 430          // Turn BCD to ASCII data,Lenth是BCD数据的长度
 431          //  注:BCD数据和ASC的数据方向相反
 432          //**********************************************************************
 433          void Lib_BCD_Asc( INT8U *Asc, INT8U *BCD ,unsigned char Lenth ) 
 434          {
 435   1         unsigned char i;
 436   1         INT8U *Ptr;
 437   1      
 438   1          for( i=Lenth; i>0; i-- )
 439   1          {
 440   2              Ptr = BCD + i - 1;
 441   2              *Asc++ = Lib_BtoA( (*Ptr>>4) & 0x0F );
 442   2              *Asc++ = Lib_BtoA( *Ptr & 0x0F );
 443   2          }
 444   1      }
 445          //**********************************************************************
 446          // Turn BCD to ASCII data,Lenth是BCD数据的长度
 447          //  注:BCD数据和ASC的数据方向一致        
 448          //**********************************************************************
 449          void Lib_BCD_AscA( INT8U *Asc, INT8U *BCD ,unsigned char Lenth )  
 450          {
 451   1         unsigned char i;
 452   1         INT8U *Ptr;
 453   1      
 454   1          for( i=0; i<Lenth; i++ )
 455   1          {
 456   2              Ptr = BCD + i;
 457   2              *Asc++ = Lib_BtoA( (*Ptr>>4) & 0x0F );
 458   2              *Asc++ = Lib_BtoA( *Ptr & 0x0F );
 459   2          }
 460   1      }
 461          
 462          //-------------------------------------------------------------------------------//
 463          //  Function:             INT8U Get_Bcc_Chk(INT8U* yourBuf, INT8U StartID, INT8U EndID)
 464          //  Description:          IEC 规约的BCC校验
 465          //  Parameters:          INT8U* yourBuf  通讯缓存数组首地址
 466          //                            
 467          //  Returns:               无
 468          //  Others:                1适用于DL/T645-1997/2007
 469          //                            2 
 470          //  author:                 sosomj         2009.02.16      V01.00
 471          //-------------------------------------------------------------------------------//
 472          INT8U Lib_math_get_BCC_chk(INT8U* yourBuf, INT8U StartID, INT8U EndID)
 473          {
 474   1          INT8U i;
 475   1          INT8U tmp;
 476   1      
 477   1          tmp=0x00;
 478   1          for(i=StartID;i<=EndID;i++)
 479   1          {
 480   2              tmp ^= *(yourBuf+i);
 481   2          }
 482   1          return tmp;
C51 COMPILER V9.01   LIB_MYMATH                                                            04/10/2019 09:17:42 PAGE 9   

 483   1      }
 484          //--------------------------------------------------------------------------------------------------------
             --------------//
 485          //     * @brief  检测数据中1的个数，返回0表示含有有偶数个数的1，返回1表示有奇数个数的1
 486          //     * @param  value 待检测的数据
 487          //     * @return  0---带检测数据中有偶数个1
 488          //     *              1---带检测的数据中奇数个1
 489          //--------------------------------------------------------------------------------------------------------
             --------------//
 490          unsigned char Lib_check_bitnum(unsigned char value)
 491          {
 492   1            uint8 i,temp_data,re_value;
 493   1            temp_data=value;
 494   1            re_value=0;
 495   1            for(i=0;i<8;i++)
 496   1            { 
 497   2                if((temp_data&0x01)==1)
 498   2                {
 499   3                    re_value++;  
 500   3                }
 501   2                temp_data=temp_data>>1;
 502   2            }
 503   1            re_value=re_value%2;
 504   1            return re_value;
 505   1      }
 506          
 507          /***************************************************************
 508          *    END
 509          ****************************************************************/
 510          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2168    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     46      97
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
