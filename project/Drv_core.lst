C51 COMPILER V9.01   DRV_CORE                                                              04/04/2019 15:41:31 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DRV_CORE
OBJECT MODULE PLACED IN .\Drv_core.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S1_HardDrv\V9811A_MCU\Drv_core.c LARGE BROWSE INCDIR(..\C_Sourc
                    -e\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_Api
                    -Protocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_Ha
                    -rdDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Drv_core.lst) OBJECT(.\Drv_core.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Drv_core.c
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : MCU core内核模块的硬件驱动C代码
   9          **note                  : V9811A ，MERTER FOR DL03C
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          
  22          
  23          /*******************************************************************************************
  24          ** 函数名称: Set_McuClock
  25          ** 函数描述:  MCU主频配置
  26          ** 输入参数: osc :   FSYSCLK_800k    FSYSCLK_1M6 
  27          **                         PHZ :  50 0r  60 HZ
  28          ** 说明    : 
  29          *******************************************************************************************/
  30          uint8 Set_McuClock(uint32 u32_freq )
  31          {
  32   1          uint8 i=0;
  33   1      
  34   1          FWC=0;
  35   1          FSC=0;
  36   1          CtrlCLK|=(BIT6+BIT7); // 开启BGP 以及PLL电路//
  37   1      #if (C_Fq == 60)
  38   1          CtrlPLL = BIT5;
  39   1      #else
                  CtrlPLL = 0; 
              #endif           
  42   1      
  43   1          switch(u32_freq)
  44   1          {
  45   2              case FSYSCLK_800k:
  46   2                  CtrlCLK&=~(BIT0+BIT1);   // 00为 1x FSYSCLK_800k
  47   2                  CtrlPLL =0;     //BIT5 =0 为50HZ
  48   2                  break;
  49   2      
  50   2              case FSYSCLK_1M6:
  51   2                  CtrlCLK |= BIT0;
  52   2                  CtrlCLK&=~(BIT1);   // 10为 2x FSYSCLK_800k
C51 COMPILER V9.01   DRV_CORE                                                              04/04/2019 15:41:31 PAGE 2   

  53   2                  CtrlPLL =0;     //BIT5 =0 为50HZ
  54   2                  break;
  55   2      
  56   2              case FSYSCLK_3M2:
  57   2                  CtrlCLK&=~(BIT0);   // 10 为 4x FSYSCLK_800k
  58   2                  CtrlCLK |= BIT1;
  59   2                  break;
  60   2      
  61   2              case FSYSCLK_6M5:
  62   2                  CtrlCLK |= BIT0;   // 11 为  8x FSYSCLK_800k
  63   2                  CtrlCLK |= BIT1;
  64   2                  break;
  65   2      
  66   2              case FSYSCLK_13M:
  67   2                  CtrlCLK |= BIT0;     // 11 为  8x FSYSCLK_800k
  68   2                  CtrlCLK |= BIT1;
  69   2                  CtrlPLL |=BIT6;              // mcuclock x 2
  70   2                  break;
  71   2      
  72   2              case FSYSCLK_26M:
  73   2                  CtrlCLK |= BIT0;     // 11 为  8x FSYSCLK_800k
  74   2                  CtrlCLK |= BIT1;
  75   2                  CtrlPLL |=(BIT7+BIT6);       //  mcuclock x 4 
  76   2                  break;
  77   2      
  78   2              default:
  79   2                  sys_err();  
  80   2              break;
  81   2          }
  82   1      
  83   1          while(!(PLLLCK&BIT0))
  84   1          {
  85   2              i++;
  86   2              if(i>50)
  87   2              {
  88   3                  return FALSE;       //在一定时间内没有锁定
  89   3              }
  90   2          }
  91   1          MCUFRQ=1; //MCU时钟源: PLL时钟
  92   1          i=0;
  93   1      
  94   1          while(!(MCUFRQ))
  95   1          {
  96   2              i++;
  97   2              if(i>50)
  98   2              {
  99   3                  return FALSE;       //在一定时间内没有锁定
 100   3              }
 101   2          }
 102   1      
 103   1          CtrlCry0=0;                 //调整启振波形
 104   1          CtrlCry1=3;                // 使用RTC   
 105   1          CtrlCry2|=BIT5;        // 停振复位功能//
 106   1      
 107   1          return TRUE;
 108   1      }
 109          
 110          /*******************************************************************************************
 111          ** 函数名称: Set_EmuClock
 112          ** 函数描述: 计量时钟设置
 113          ** 输入参数: Tpye:   EMUCLK_OFF 关计量
 114                                        EMUCLK_800k  时钟选择
C51 COMPILER V9.01   DRV_CORE                                                              04/04/2019 15:41:31 PAGE 3   

 115          **                         
 116          ** 说明    : 注意EMU的主频必须是ADC主频的4倍或8倍
 117          *******************************************************************************************/
 118          uint8 Set_EmuClock(uint32 u32_freq)
 119          {
 120   1          uint8 i=0;
 121   1      
 122   1          PMG = 0;
 123   1          CtrlCLK|=(BIT6+BIT7); // 开启BGP 以及PLL电路//
 124   1       
 125   1          switch(u32_freq)
 126   1          {
 127   2              case EMUCLK_OFF:
 128   2                  PMG = 1;
 129   2                  return TRUE;
 130   2      
 131   2              case EMUCLK_800k:
 132   2                  CtrlCLK&=~(BIT3+BIT2);   // 00为  1*EMUCLK_800k
 133   2                  CtrlCLK&=~(BIT5+BIT4);   // 00为  1*ADCCLK_204k
 134   2                  break;
 135   2      
 136   2              case EMUCLK_1M6:
 137   2                  CtrlCLK |= BIT2;
 138   2                  CtrlCLK&=~(BIT3);   // 01 为 2x EMUCLK_800k
 139   2      
 140   2                      CtrlCLK |= BIT4;
 141   2                      CtrlCLK&=~(BIT5);   // 01 为 2x ADCCLK_204k
 142   2                  break;
 143   2              
 144   2              case  EMUCLK_3M2:
 145   2                  CtrlCLK&=~(BIT2);   // 10 为 4x EMUCLK_800k
 146   2                  CtrlCLK |= BIT3;
 147   2      
 148   2                  CtrlCLK&=~(BIT4);   // 10 为 4x ADCCLK_204k
 149   2                  CtrlCLK |= BIT5;
 150   2                  break;
 151   2      
 152   2              default:
 153   2                  sys_err();  
 154   2              break;
 155   2         }
 156   1      
 157   1          while(!(PLLLCK&BIT0))
 158   1          {
 159   2              i++;
 160   2              if(i>50)
 161   2              {
 162   3                  return FALSE;       //在一定时间内没有锁定
 163   3              }
 164   2          }
 165   1      
 166   1          MEAFRQ=1;   //MEA时钟源: PLL时钟
 167   1          i=0;
 168   1          while(!(MEAFRQ))
 169   1          {
 170   2              i++;
 171   2              if(i>50)
 172   2              {
 173   3                  return FALSE;       //在一定时间内没有锁定
 174   3              }
 175   2          }
 176   1              
C51 COMPILER V9.01   DRV_CORE                                                              04/04/2019 15:41:31 PAGE 4   

 177   1          return TRUE;
 178   1      }
 179          
 180          /*******************************************************************************************
 181          ** 函数名称: Set_McuSleep
 182          ** 函数描述: 系统休眠处理
 183          ** 输入参数: NONE
 184          ** 输出参数: 无
 185          ** 说明    : 
 186          *******************************************************************************************/
 187          void Set_McuSleep(void)
 188          {
 189   1          uint8 i;
 190   1          FWC=0;
 191   1          FSC=0;
 192   1      
 193   1          CtrlADC6=0;             //关闭所有的ADC
 194   1          CtrlLDO = 0x00;
 195   1      
 196   1         for(i=0;i<20;i++);      //等待
 197   1          PMG=1;                  //关闭计量时钟
 198   1      
 199   1      //      Full_SEG(0x00);
 200   1          if((Systate&BIT0)==0x01)
 201   1          {   
 202   2              sys_err();        //如果上电则休眠处理 //
 203   2          }
 204   1      
 205   1          MCUFRQ=0;
 206   1          while(MCUFRQ);
 207   1      
 208   1          if((Systate&BIT0)==0x01)
 209   1          {   
 210   2              sys_err();        //如果上电则休眠处理 //
 211   2          }
 212   1      
 213   1          for(i=0;i<3;i++);       //等待//
 214   1          CtrlCLK=0x00;
 215   1          while(CtrlCLK);
 216   1      
 217   1          SLEEP0 = 1;
 218   1          Lib_Delay_2us(50);    // 5 OSC //
 219   1          NOP();
 220   1      //      if((Systate&BIT0)==0x01)  //休眠以后人工上电全屏自检
 221   1      //    {   
 222   1      //        sys_err();      //如果上电则休眠处理 //
 223   1      //    }
 224   1      }
 225          
 226          
 227          /*******************************************************************************************
 228          ** 函数名称: Set_McuSleep
 229          ** 函数描述: 系统休眠处理
 230          ** 输入参数: NONE
 231          ** 输出参数: 无
 232          ** 说明    : 
 233          *******************************************************************************************/
 234          void Set_Sleep_out(void)
 235          {
 236   1       uint8 i;
 237   1      
 238   1      
C51 COMPILER V9.01   DRV_CORE                                                              04/04/2019 15:41:31 PAGE 5   

 239   1      
 240   1         I2C_DIO_OUT;
 241   1         I2C_PORT_OUT |=PIN_E2SDA;    
 242   1         I2C_CLK_OUT;
 243   1         I2C_CLK_HIGH;
 244   1              
 245   1      //关闭UART
 246   1          TCON2=0;
 247   1          TCON3=0;
 248   1          TCON4=0;
 249   1          CFGA=0;
 250   1      // 关AD//
 251   1          CtrlADC6=0;                         //关AD通道
 252   1          CtrlLDO|=BIT5;                      //关LDO
 253   1      
 254   1          SetMeterCfgACK(0x00,PMCtrl4);   //关数字的AD通道
 255   1          SetMeterCfgACK(0x00,PMCtrl1);   //关CF脉冲
 256   1      
 257   1         for(i=0;i<20;i++);
 258   1         
 259   1         PMG=1;                              //关闭计量时钟
 260   1      
 261   1      
 262   1      }
 263          
 264          
 265          /*******************************************************************************************
 266          **    END
 267          *******************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    608    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
