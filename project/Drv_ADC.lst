C51 COMPILER V9.01   DRV_ADC                                                               04/10/2019 09:17:39 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DRV_ADC
OBJECT MODULE PLACED IN .\Drv_ADC.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S1_HardDrv\V9811A_MCU\Drv_ADC.c LARGE BROWSE INCDIR(..\C_Source
                    -\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_ApiP
                    -rotocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_Har
                    -dDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Drv_ADC.lst) OBJECT(.\Drv_ADC.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Drv_ADC.c
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : ADC模块的硬件驱动C代码
   9          **note                  : V9811A ，
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          //RTC温度曲线K系数
  21          code INT8U InitParaRTC[64]=
  22          {
  23              0x03,0xE5,  //0.997 
  24              0x03,0xE8, // 1.000 
  25              0x03,0xEC, // 1.004 
  26              0x03,0xEF,// 1.007 
  27              0x03,0xD9,  //0.985 
  28              0x03,0xDC,  //0.988 
  29              0x03,0xE0,  //0.992 
  30              0x03,0xE3,  //0.995 
  31              0x03,0xD3,  //0.979 
  32              0x03,0xD6,  //0.982 
  33              0x03,0xD9,  //0.985 
  34              0x03,0xDC,  //0.988 
  35              0x03,0xC6,  //0.966 
  36              0x03,0xC9,  //0.969 
  37              0x03,0xCC,  //0.972 
  38              0x03,0xCF,  //0.975 
  39              0x04,0x10,  // 1.040 
  40              0x04,0x13,  // 1.043 
  41              0x04,0x16,  // 1.046 
  42              0x04,0x19,  // 1.049 
  43              0x04,0x03,  // 1.027 
  44              0x04,0x07,  //      //1.031 
  45              0x04,0x0A,  //      //1.034 
  46              0x04,0x0D,  //      //1.037 
  47              0x03,0xFA,  //      //1.018 
  48              0x03,0xFD,  //      //1.021 
  49              0x04,0x00,  //      //1.024 
  50              0x04,0x03,  //      //1.027 
  51              0x03,0xED, //       //1.005 
  52              0x03,0xF1, //       //1.009 
C51 COMPILER V9.01   DRV_ADC                                                               04/10/2019 09:17:39 PAGE 2   

  53              0x03,0xF4, //       //1.012 
  54              0x03,0xF7, //       //1.015 
  55          };
  56          
  57          
  58          /*******************************************************************************************
  59          ** 函数名称: Enable_M_ADC
  60          ** 函数描述: 开通M通道指定的 测量功能
  61          ** 输入参数: uint8  m_ch  [M_ADC_CH1_TEMPERATURE ,  M_ADC_CH2_VBAT]
  62          ** 输出参数: 无 
  63          ** 说明    : 开通后10ms延时后才可以获取数据
  64          *******************************************************************************************/
  65          void Enable_M_ADC(uint8  m_ch)
  66          {
  67   1      INT32U ctmp;
  68   1       
  69   1      
  70   1          if(m_ch == M_ADC_CH1_TEMPERATURE)   
  71   1          {
  72   2              CtrlADC5 = (BIT7+BIT0);  //CH1- 测温度通道,此处为M通道专用控制器，采用直接赋值方式  //           
  73   2          } 
  74   1          else  if(m_ch == M_ADC_CH2_VBAT)   
  75   1          {
  76   2           // M2通道//
  77   2              CtrlADC5 = (BIT7+BIT5+BIT1);  // CH2- 测VBAT通道, ，采用直接赋值方式  //            
  78   2          }
  79   1          else
  80   1          {
  81   2              return;
  82   2          }  
  83   1      
  84   1          CtrlADC6 |= BIT3;             //BIT3 =1  开启M通道ADC   ，此处为多处复用控制器，采用或方式赋值 //
  85   1          CtrlM |= BIT0;
  86   1      
  87   1          ctmp = ReadMeterParaACK(PMCtrl1);
  88   1          ctmp |= (BIT3+BIT4);                //BIT3 =1使能M通道数字信号输入； BIT4 =1使能M通道数字信号处理 //
  89   1          SetMeterCfgACK( ctmp,PMCtrl1);    
  90   1      
  91   1      }
  92          
  93          /*******************************************************************************************
  94          ** 函数名称: Disable_M_ADC
  95          ** 函数描述: 关闭M通道ADC功能
  96          ** 输入参数: 无
  97          ** 输出参数: 无 
  98          ** 说明    : 为了降低电池在检测时的功耗，所以需要关闭
  99          *******************************************************************************************/
 100          void Disable_M_ADC(void)
 101          {
 102   1      INT32U ctmp;
 103   1      
 104   1              CtrlADC6 &=~BIT3;   //BIT3 =0 关闭M通道ADC   ，此处为多处复用控制器，采用与方式赋值 //
 105   1              CtrlADC5 = 0x80;      //测量内部低  // 默认测试温度
 106   1      //      CtrlADC5 = 0x81;      //测量内部低  // 默认测试温度
 107   1              CtrlM |= BIT0;
 108   1              ctmp = ReadMeterParaACK(PMCtrl1);
 109   1              ctmp &=~ BIT3;      //BIT3 =0关闭M通道数字信号输入 //
 110   1              SetMeterCfgACK( ctmp,PMCtrl1);     
 111   1      }
 112          
 113          
 114          /*******************************************************************************************
C51 COMPILER V9.01   DRV_ADC                                                               04/10/2019 09:17:39 PAGE 3   

 115          ** 函数名称: Samlpe_BatAdc
 116          ** 函数描述: 获取VBAT管脚的M通道的测量直流电压
 117          ** 输入参数: 无
 118          ** 输出参数: uint16 ，电池电压值，量纲:0.01V
 119          ** 说明    : 
 120          *******************************************************************************************/
 121          uint16  Samlpe_BatAdc(void)
 122          {
 123   1       uint16 nVBAT;
 124   1       uint32 u32_PMdataltemp;
 125   1      
 126   1          Enable_M_ADC(M_ADC_CH2_VBAT);
 127   1          Lib_Delay_ms(10);
 128   1      
 129   1          u32_PMdataltemp =ReadMeterParaACK(DATAOM);
 130   1          nVBAT =(uint16)(u32_PMdataltemp>>16);
 131   1          if (nVBAT& 0x8000) 
 132   1          {
 133   2             // nVBAT= 0;
 134   2             nVBAT=(~nVBAT)+1;
 135   2          }
 136   1          else
 137   1          {
 138   2              nVBAT = nVBAT/71-5;             //电容方式 分压//
 139   2          }
 140   1      
 141   1          NOP();
 142   1        // Disable_M_ADC();
 143   1          return nVBAT;
 144   1      }
 145          
 146          
 147          /*******************************************************************************************
 148          ** 函数名称: Samlpe_BatAdc
 149          ** 函数描述: 获取VBAT管脚的M通道的测量直流电压
 150          ** 输入参数: 无
 151          ** 输出参数: uint16 ，电池电压值，量纲:0.01V
 152          ** 说明    : 
 153          *******************************************************************************************/
 154          int16  Samlpe_temperatureAdc(void)
 155          {
 156   1       float temperature;
 157   1         
 158   1          Enable_M_ADC(M_ADC_CH1_TEMPERATURE);
 159   1          Lib_Delay_ms(10);
 160   1          temperature = Cal_temperature_data();
 161   1          return((int16)(temperature*10));
 162   1      }
 163          
 164          
 165          /*******************************************************************************************
 166          ** 函数名称: Samlpe_temperatureAdc
 167          ** 函数描述: 获取当前电表温度
 168          ** 输入参数: 无
 169          ** 输出参数: uint16 ，电池电压值，量纲:0.01V
 170          ** 说明    : 
 171          *******************************************************************************************/
 172          float  Cal_temperature_data(void)
 173          {
 174   1       uint8 i;  
 175   1       uint8 code *p;
 176   1      
C51 COMPILER V9.01   DRV_ADC                                                               04/10/2019 09:17:39 PAGE 4   

 177   1       S_TEMPPARA s_TempPara;
 178   1       uint32  MAdcValue;
 179   1       ST_U16_U08 Kpara;
 180   1       ST_U32_U08 temp1;
 181   1      
 182   1       float temperature; //当前温度//
 183   1       uint8 TempParaSum;
 184   1       uint32  temp;
 185   1      
 186   1      
 187   1          p=(uint8 code*)0x420;
 188   1          for(i=0;i<3;i++)
 189   1          {
 190   2              Lib_FCpyTMem((uint8*)&s_TempPara.ul_TempParaA,p+i*24,sizeof(S_TEMPPARA));       // 注意小端//
 191   2              TempParaSum=Lib_get_csck_int8u_num((uint8*)&s_TempPara.ul_TempParaA,sizeof(S_TEMPPARA)-2,0x33);
 192   2              if(TempParaSum==s_TempPara.uc_Add33)
 193   2              {
 194   3                  break;
 195   3              }
 196   2          }
 197   1          Lib_Rev_Copy_Arry((INT8U *)&s_TempPara.ul_TempParaA, 4);
 198   1          Lib_Rev_Copy_Arry((INT8U *)&s_TempPara.ul_TempParaB, 4);
 199   1          Lib_Rev_Copy_Arry((INT8U *)&s_TempPara.ul_TempParaC, 4);
 200   1          Lib_Rev_Copy_Arry((INT8U *)&s_TempPara.ul_TempParaD, 4);
 201   1          Lib_Rev_Copy_Arry((INT8U *)&s_TempPara.ul_TempParaE, 4);
 202   1      
 203   1          MAdcValue=ReadMeterParaACK(DATAOM);//读M通道原始值
 204   1      
 205   1          temp=MAdcValue>>16;
 206   1          Lib_FCpyTMem(&Kpara.B08[0], (uint8 code*)&InitParaRTC[(CtrlBGP&0x3e)], 0x02);
 207   1          temp=(temp*Kpara.u16)/1000;
 208   1      
 209   1          if(TempParaSum!=s_TempPara.uc_Add33)
 210   1          {        
 211   2              s_TempPara.ul_TempParaA = 18018;        // 精工
 212   2              s_TempPara.ul_TempParaB = 1;
 213   2              s_TempPara.ul_TempParaC = 224019254;
 214   2              s_TempPara.ul_TempParaD = 7092;
 215   2              s_TempPara.ul_TempParaE = 10;
 216   2          }
 217   1       temperature=(s_TempPara.ul_TempParaB*sqrt(s_TempPara.ul_TempParaC+s_TempPara.ul_TempParaD*temp)-s_TempPar
             -a.ul_TempParaA)/s_TempPara.ul_TempParaE;
 218   1      
 219   1      
 220   1          p=(uint8 code*)0x480;
 221   1          for(i=0;i<3;i++)
 222   1          {
 223   2              Lib_FCpyTMem((uint8*)&temp1.B08[0],p+(i*4),4);  
 224   2              temp1.B08[2]    = Lib_get_csck_int8u_num((uint8*)&temp1.B08[0],2,0x33);
 225   2              if(temp1.B08[2] == temp1.B08[3])
 226   2              {
 227   3                  break;
 228   3              }
 229   2          }
 230   1      
 231   1          if(temp1.B08[2] != temp1.B08[3])
 232   1          {
 233   2              temp1.W16[0] = 0;               // 校验出错 默认0//
 234   2          }
 235   1      
 236   1          if(temp1.W16[0]&0x8000)
 237   1          {
C51 COMPILER V9.01   DRV_ADC                                                               04/10/2019 09:17:39 PAGE 5   

 238   2              temp1.W16[0] = ~temp1.W16[0]+1;
 239   2              temperature -= (temp1.W16[0]/10);
 240   2          }
 241   1          else
 242   1          {
 243   2              temperature += (temp1.W16[0]/10);
 244   2          }
 245   1      
 246   1          if(temperature>90)
 247   1          {   
 248   2              temperature=90;
 249   2          }else if(temperature<(-43))
 250   1          {   
 251   2              temperature=-43;
 252   2          }
 253   1      
 254   1          return (temperature);
 255   1      
 256   1      }
 257          
 258          
 259          
 260          
 261          
 262          
 263          /*******************************************************************************************
 264          **    END
 265          *******************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1069    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
