C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PROC_SYSTEM_INITIALIZE
OBJECT MODULE PLACED IN .\Proc_System_Initialize.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S0_System\Proc_System_Initialize.c LARGE BROWSE INCDIR(..\C_Sou
                    -rce\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_A
                    -piProtocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_
                    -HardDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Proc_System_Initialize.lst) OBJECT(.\Proc_System_Initialize.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Proc_System_Initialize.c
   6          **Author                : maji
   7          **date                  : 2016-04-20
   8          **description   : 系统复位初始化处理相关C代码
   9          **note                  : V9811A ，MERTER FOR DL03C
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          
  22          /****************************************************************
  23          Function:           Proc_Initialize_systerm_normal_mode 
  24          Description:            系统上电/复位初始化函数 
  25          Input:                  no
  26          Parameters:             no
  27          Returns:                        no                        
  28          Others:         
  29          ****************************************************************/
  30          void Proc_handle_when_systerm_reset(void)
  31          {
  32   1         #if(MCU_TYPE == MCU_G80F92X)   // 中颖芯片 //
                      IEN0=0x00;
                      IEN1=0x00;
                      gs_sys_globaL_var.reset_status = RSTSTAT;
                      Switch_Clk_4P096M();
                 #endif
  38   1      
  39   1         #if(MCU_TYPE == MCU_V98XX)   //万工芯片 //
  40   1         gs_sys_globaL_var.reset_status = Systate;
  41   1               #ifndef _RTC_CAL    //不需要温补操作时执行下面内容 //
  42   1                  if((RTCCH != 0) | (RTCCL != 0))
  43   1                  {
  44   2                      RTCPEN = 0x96;
  45   2                      RTCPWD = 0x57;
  46   2                      RTCCH = 0x00;
  47   2                      RTCCL = 0x00;
  48   2                      RTCPEN = 0x96;
  49   2                      RTCPWD = 0x56;
  50   2                  }
  51   1                  NOP();
  52   1                #endif
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 2   

  53   1      
  54   1          SPCFNC=1;           //调整FLASH功耗
  55   1          XBYTE[0x0402]=0x86;
  56   1          SPCFNC=0;
  57   1          CBANK=0X01;
  58   1          Set_McuClock(FSYSCLK);   //SetMCUPLL();  6Mhz
  59   1         #endif
  60   1      
  61   1      
  62   1          Init_GPIO_sleep();
  63   1          E2p_IIC_Initail();
  64   1          E2p_Stop_i2c();
  65   1      
  66   1      }
  67          
  68          
  69          /****************************************************************
  70          Function:               Proc_Initialize_INRam
  71          Description:            上电初始化RAM相关
  72          Input:                  no
  73          Parameters:             no
  74          Returns:                        no                        
  75          Others:         
  76          ****************************************************************/
  77          void Proc_Initialize_INRam(void)
  78          {
  79   1      //      uint8 Bill_Data;
  80   1              uint8 i,j;
  81   1      //      ST_U16_U08 u16_month_A,u16_month_B;
  82   1      //      ST_U16_U08 u16_day_A,u16_day_B;
  83   1              uint8 last_rec_dateTime[6];//最近一次冻结时间
  84   1              uint8 param_settel[2];
  85   1      //      uint8 max_dateTime;
  86   1      
  87   1      
  88   1              INT8U eeprom_flg[3];
  89   1              //////////dubge   将E2P初始化////////////
  90   1              //mem_db_clr(0XA5);
  91   1              ////////////////////////
  92   1              ////读取EEPROM是否首次上电标志位，若flg=0x653412为已经上过电的表计，///////
  93   1              ////反之，该表计从未上过电，将单备份区清零 双校验区校验位清零 yang 2017-12-29////
  94   1              mem_read(&eeprom_flg[0], ADR_METER_PARAM1_EEPROM_Flag, 3, MEM_E2P1);
  95   1              if((eeprom_flg[0]!=0x65)||(eeprom_flg[1]!=0x34)||(eeprom_flg[2]!=0x12))
  96   1              {
  97   2                      d_flag = 1;
  98   2                      api_freeze_energy_pre_day(); //上电时将日冻结EEP区的数据清零
  99   2                      mem_fill(ADR_BLOCK101_BILL1_DATA_E2P, 0x1000, 0x00, MEM_E2P1);//
 100   2                      mem_db_clr(0XA5);//将双备份去校验清零
 101   2                      CLRWDT();
 102   2              }
 103   1      
 104   1      //      d_flag = 1;
 105   1      //      api_freeze_energy_pre_day(); //上电时将日冻结EEP区的数据清零
 106   1      
 107   1              if(gs_sys_globaL_var.work_mode == NORMAL_MODE)
 108   1              {
 109   2                      mem_db_check();  //数据校验检查 //
 110   2                      CLRWDT();
 111   2              }
 112   1              ////////////////////////////////////////////////
 113   1              //  S0_System 区相关RAM初始化
 114   1              ////////////////////////////////////////////////
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 3   

 115   1              Proc_sys_data_init();
 116   1              Proc_init_Check_var();
 117   1              CLRWDT();
 118   1              ////////////////////////////////////////////////
 119   1              //  S1_HardDrv 区相关RAM初始化
 120   1              ////////////////////////////////////////////////
 121   1              mem_read((uint8 *)&gs_adj_emu_param, ADR_BLOCK70_EMU_PARAM_E2P, LEN_BLOCK70_EMU_PARAM_E2P, MEM_E2P1);
 122   1              Init_EMU_RAM();    
 123   1              Proc_init_tou_var();
 124   1      
 125   1              ////////////////////////////////////////////////
 126   1              //  S3_ApiPlat 区相关RAM初始化
 127   1              ////////////////////////////////////////////////
 128   1              Init_LoadPro_param();
 129   1              CLRWDT();
 130   1              api_init_md_data_ram();
 131   1              api_init_current_energy_data_ram();
 132   1              api_Measure_ram_INIT();
 133   1              api_measure_VBAT_pre_min();
 134   1              api_measure_temperature_pre_min();   
 135   1              CLRWDT();
 136   1      #ifdef _RTC_CAL    //不需要温补操作时执行下面d内容 //
                      Handl_RTC_Adj_per_minu();
              #endif
 139   1      
 140   1      #if (TARIFF_MAX_NUM>1)
 141   1              api_update_triffNo_pre_minute();  
 142   1              CLRWDT();
 143   1      #endif
 144   1      
 145   1      #if (BILL_MAX_NUM>1)
 146   1      if (Bill_Data == 0x30)
 147   1      {
 148   2              CLRWDT();
 149   2              i = 0;
 150   2      
 151   2              mem_read(&last_rec_dateTime[0],ADR_BLOCK161_EVENII_PWN_E2P+6,5,MEM_E2P1);
 152   2              mem_read(&param_settel[0], ADR_METER_PARAM1_SETL_DDHH, 2, MEM_E2P1);
 153   2              if(last_rec_dateTime[2]<param_settel[0])
 154   2              {       
 155   3                      i = 1;  
 156   3              }else{
 157   3                      i = 0;
 158   3              }
 159   2              i = i + gs_CurDateTime.Month - last_rec_dateTime[1];
 160   2              if (gs_CurDateTime.Month < param_settel[0])
 161   2              {
 162   3                      i = i - 1;
 163   3              }else{
 164   3                      i = i + 0;
 165   3              }
 166   2              if (i > 6)
 167   2              {       i = 6;  }
 168   2              if (i > 0)
 169   2              {
 170   3                      for(j=0;j<i;j++)
 171   3                      {
 172   4                              api_write_bill_data(BILL_ID0_MOTTH_SETTL);
 173   4                              CLRWDT();
 174   4                      }
 175   3                      CLRWDT();
 176   3                      api_clr_current_MD_data();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 4   

 177   3              }
 178   2      }
 179   1      #endif
 180   1      
 181   1              ////////////////////////////////////////////////
 182   1              //  S4_ApiUser 区相关RAM初始化
 183   1              ////////////////////////////////////////////////
 184   1              api_init_display();
 185   1      }
 186          
 187          
 188          /****************************************************************
 189          Function:               void SysInitialize(void)  
 190          Description:            系统上电/复位初始化函数 
 191          Input:                  no
 192          Parameters:             no
 193          Returns:                        no                        
 194          Others:         
 195          ****************************************************************/
 196          void Proc_sleep_when_reset(void)
 197          {
 198   1         uint8 volatile  check_cnt;
 199   1         uint8 volatile  check_cnt2;
 200   1         RTC_TYPE rtc_data_tmp;
 201   1        
 202   1          check_cnt=0;
 203   1          check_cnt2 = 0;
 204   1      
 205   1         CLRWDT(); 
 206   1      #if(MCU_TYPE == MCU_G80F92X)   // 中颖芯片 //
               
                 EMUIE=0x00;  
                 EMUSR=0x00;  
                 LDOCON=0x00;
                 CLRWDT();     
                 Init_GPIO_sleep();
                // Config_CpuReg_Sleep();  
                 IEN0=0x00;
                 IEN1=0x00;                       
                 TPCON=0x00;
                 Close_SecOut(); 
              /////////////////////////////////////
                  gs_sys_globaL_var.work_mode = SLEEP_MODE;
                  api_Measure_ram_INIT();          //清除瞬时量 //
                  api_check_current_energy_data();            //  初始化电量//
                  //初始化开盖状态和工厂状态的全局变量代码//
                  mem_read(&gs_sys_globaL_var.open_cover_status, ADR_METER_VAR_OPENED, 1, MEM_E2P1);
                  mem_read(&gs_sys_globaL_var.meter_factory_status, ADR_METER_PARAM1_FC_CFG, 1, MEM_E2P1);   //数据0=0x5
             -A 代表工厂状态 // 
                  Init_LCD();
                  Init_RTC();
                  gs_dis_ctl_var.item=0x03;
                  Link_Get_DisTab_Var(gs_dis_ctl_var.item) ;                  // 获取显示项目信息  //
                  api_updated_LCDDisplayPixel_per_second();
              ///////////////////////////////////////////////// 
                 CLRWDT();
              
                 CLKCON=Bin(00000000);       //降速到32K  
                 IT21=0;
                 IT20=1;                    //外部中断2下降沿触发
                 IEN1|=Bin(10000000);       //允许LPD中断  
                 IEN1|=Bin(00000010);       //允许外部中断2
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 5   

                 IEN1|=Bin(00001000);       //允许RTC中断
                 EA=1;
              
              
                  while( 1 )
                  {           
                     CLRWDT();                
                      Enter_PwrDwnMode();         // 进入休眠状态 //
                      CLRWDT();                          //唤醒后的处理 //
              
                      if(gs_sys_run.back_fg&BIT1_BACK_FG_RTC)
                      {
                          gs_sys_run.back_fg &= ~BIT1_BACK_FG_RTC;    
                          //下电状态下的开表上盖检测 //         
                          api_handl_dis_sleep();
                      }   
              
                      if(CheckPOWERUP()== TRUE)               //市电判断  //
                      {
                          Feed_WDT(0x02);        //利用看门狗复位，保证可靠运行 //
                          while(1);   
                      }
              
                      if(Check_LX_mode()== TRUE)              //PT电源判断  //
                      {
                          Feed_WDT(0x02);        //利用看门狗复位，保证可靠运行 //
                          while(1);   
                      }
              
                 } 
              
              #endif
 270   1      
 271   1      
 272   1      #if(MCU_TYPE == MCU_V98XX)   //万工芯片 //
 273   1      //      CLRWDT();     
 274   1      //      api_Measure_ram_INIT();          //清除瞬时量 //
 275   1      //      api_init_current_energy_data_ram();//  初始化电量//
 276   1      //      //api_check_current_energy_data();              //  初始化电量//
 277   1      //      Init_LCD();
 278   1      //      api_handl_dis_sleep();
 279   1      //      Init_GPIO_sleep();
 280   1      //      SetExtRTC(0x01,0x02);// 小时唤醒
 281   1      //      //SetExtRTC(0x01,0x01);// 分钟唤醒//
 282   1      //      IOWK|=BIT0;
 283   1      //      Set_McuSleep();
 284   1      //      if((Systate&BIT0)==0x01)  //休眠以后人工上电全屏自检
 285   1      //      {   
 286   1      //              sys_err();        //如果上电则休眠处理 //
 287   1      //      }
 288   1      
 289   1              CLRWDT();     
 290   1              api_Measure_ram_INIT();          //清除瞬时量 //
 291   1      //      Init_GPIO_run();
 292   1      //      E2p_IIC_Initail();
 293   1      //      E2p_Start_i2c();
 294   1              api_init_current_energy_data_ram();//  初始化电量//
 295   1              //api_check_current_energy_data();              //  初始化电量//
 296   1      
 297   1              Init_LCD();
 298   1              api_handl_dis_sleep();
 299   1              Init_GPIO_sleep();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 6   

 300   1              //下翻按键      2019-01-18
 301   1              P14FS = 0x00;
 302   1              P1IE |= BIT4;//输入使能
 303   1              while(1)
 304   1              {
 305   2                      SetExtRTC(0x01,0x02);// 小时唤醒
 306   2                      //SetExtRTC(0x01,0x01);// 分钟唤醒//
 307   2                      IOWK|=BIT0;
 308   2                      Set_McuSleep();
 309   2      //              if((Systate&BIT0)==0x01)  //休眠以后人工上电全屏自检
 310   2                      CLRWDT();
 311   2                      Set_McuClock(FSYSCLK_3M2); 
 312   2              
 313   2                      //获取当前时间数据数据   //
 314   2                  Get_RTCTime(&rtc_data_tmp);
 315   2                      Lib_Copy_Str_TwoArry(&gs_CurDateTime.Week, &rtc_data_tmp.Week, 7);
 316   2              
 317   2                      if((Systate&BIT0)==0x01)//休眠以后人工上电全屏自检  
 318   2                      {
 319   3                              Init_GPIO_run();
 320   3                      E2p_IIC_Initail();
 321   3                      E2p_Start_i2c();
 322   3                              ////
 323   3                              mem_write(ADR_BLOCK_4Energy_L0_E2P, &energy_data_array[0].buf[0], 5*LEN_EC_UNIT,MEM_E2P1);
 324   3                              mem_write(ADR_BLOCK_4MMD_L0_E2P,&st_mmd_unit_array[0].buf[0],5*LEN_NEW_MMD_UNIT,MEM_E2P1);
 325   3                              mem_write(ADR_BLOCK_4MMD_sum_L0_E2P,&sum_st_mmd_unit_array[0].buf[0],5*LEN_SUM_MMD_UNIT,MEM_E2P1);              
 326   3                              /////
 327   3                              api_freeze_energy_pre_day();  
 328   3                              sys_err();        //如果上电 //  
 329   3                      }
 330   2                      api_freeze_energy_Ram_pre_day();
 331   2                      Proc_display_Power_down_process();
 332   2              }
 333   1      #endif
 334   1      }
 335                  
 336          
 337          
 338          
 339          
 340          
 341          /****************************************************************
 342          Function:           Proc_Initialize_systerm_normal_mode 
 343          Description:            系统上电/复位初始化函数 
 344          Input:                  no
 345          Parameters:             no
 346          Returns:                        no                        
 347          Others:         
 348          ****************************************************************/
 349          void Proc_Initialize_systerm_normal_mode(void)
 350          {
 351   1              Set_McuClock(FSYSCLK_3M2);   //SetMCUPLL();  6Mhz
 352   1              Init_GPIO_run();
 353   1              Init_LCD();
 354   1              Full_SEG(0xFF);
 355   1              CLRWDT();
 356   1              Proc_Initialize_INRam();  //初始化RAM区 //
 357   1      //      Drv_relay_powerup_check();       //继电器初始化检查处理  //
 358   1      //      Lnk_SX2176_Intilize();  //LORA//
 359   1              Init_Timer();   //定时器
 360   1              api_handl_COMM_FRAME_ERROR(UART_CH0_IR);        //TTL 通讯硬件初始化
 361   1              Init_RTC();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 7   

 362   1              Init_EMU(NORMAL_MODE);
 363   1              Check_EMU_AdjParam();
 364   1              Lib_Set_String( &LPReadPara.Original_Ptr, 0, 5) ;       
*** WARNING C182 IN LINE 364 OF ..\C_SOURCE\S0_SYSTEM\PROC_SYSTEM_INITIALIZE.C: pointer to different objects
 365   1              gs_even_fun_var.into_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 366   1              gs_even_fun_var.esc_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间
 367   1              api_deal_even_class_recode(ID_CLASS_II_PWN,END);        
 368   1              Lib_Set_String(&gs_even_fun_var.esc_cnt,0,sizeof(EVEN_FUN_VAR));
 369   1              KEY_ERR_COVER_INITLIZE() ;
 370   1      }
 371          
 372          
 373          
 374          /****************************************************************
 375          Function:          Proc_Initialize_systerm_reset
 376          Description:        系统上电/复位初始化函数 
 377          Input:                  no
 378          Parameters:             no
 379          Returns:                        no                        
 380          Others:         
 381          ****************************************************************/
 382          void Proc_Initialize_systerm_reset(void)
 383          {
 384   1      
 385   1              Proc_handle_when_systerm_reset();   // 系统复位的处理函数，注意MCU不同时需要进行修改函数内容 //
 386   1              if(CheckPOWERUP()== FALSE)              //
 387   1              {
 388   2                      Lib_Delay_ms(300);
 389   2              }
 390   1              if(CheckPOWERUP()== FALSE)              //
 391   1              {
 392   2                      gs_sys_globaL_var.work_mode = SLEEP_MODE;  
 393   2              }
 394   1              else
 395   1              {
 396   2                      gs_sys_globaL_var.work_mode = NORMAL_MODE;
 397   2              }
 398   1      
 399   1              if(gs_sys_globaL_var.work_mode == SLEEP_MODE)
 400   1              {
 401   2                      Proc_sleep_when_reset();                                   // 休眠初始化//
 402   2              }
 403   1              else
 404   1              {
 405   2                      Proc_Initialize_systerm_normal_mode();    //  市电供应情况下的初始化//
 406   2              }
 407   1      }
 408          
 409          void Proc_display_Power_down_process(void)
 410          {
 411   1               //下电显示
 412   1      
 413   1                      //检测按键
 414   1      
 415   1      
 416   1                      if(Judge_PG_DN_key() == TRUE )//&& button_delay == 0)
*** WARNING C206 IN LINE 416 OF ..\C_SOURCE\S0_SYSTEM\PROC_SYSTEM_INITIALIZE.C: 'Judge_PG_DN_key': missing function-prot
             -otype
 417   1                      {
 418   2                              button_flag = 1;
 419   2      //                      button_delay = 1;
 420   2                      //      api_updated_LCDDisplayItem_per_second();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 8   

 421   2                      }
 422   1      //              if(Judge_PG_DN_key() == FALSE)
 423   1      //              {
 424   1      //                      button_delay = 0;
 425   1      //              }
 426   1      ///////////////////////////
 427   1      
 428   1                      if(button_flag  == 1)
 429   1                      {
 430   2                              button_flag = 0;
 431   2                              if(dis_num_char == 5)
 432   2                              {
 433   3                                      dis_num_char = 0;
 434   3                              }
 435   2                              else
 436   2                              {
 437   3                                      dis_num_char ++;
 438   3                              }
 439   2                              api_updated_LCDDisplayPixel_per_second();
 440   2                              gs_dis_ctl_var.keep_sec[0] = 6; //轮显持续时间//
 441   2                      }
 442   1                      else
 443   1                      {
 444   2                              if(gs_dis_ctl_var.keep_sec[0] > 0)
 445   2                                      gs_dis_ctl_var.keep_sec[0]--;
 446   2                      }
 447   1                      if(gs_dis_ctl_var.keep_sec[0] == 0)
 448   1                      {
 449   2                              dis_num_char = 0;
 450   2                              Bar_No = 0;//清除进度条显示
 451   2                              IsModeTest = FALSE;
 452   2                              api_updated_LCDDisplayPixel_per_second();
 453   2                      }
 454   1      
 455   1      }
 456          
 457          /****************************************************************
 458          Function:           Proc_judge_Power_down_process
 459          Description:       运行过程中的掉电检查函数
 460          Input:                  no
 461          Parameters:             no
 462          Returns:                        no                        
 463          Others:         
 464          ****************************************************************/
 465          void Proc_judge_Power_down_process(void)
 466          {
 467   1              RTC_TYPE rtc_data_tmp;
 468   1      
 469   1              if(CheckPOWERUP()==FALSE)
 470   1              {
 471   2                      PMG=1;                  //关闭计量时钟
 472   2                      DisableINT();                                   // disable interrupt function  //
 473   2                      api_accum_current_energy_data_pre_second();
 474   2                      mem_db_write(ADR_BLOCK00_EC_L0_E2P,&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CURRENT,MEM_E2P1);
 475   2                      
 476   2      //              d_flag = 1;
 477   2      //              api_freeze_energy_pre_day(); //上电时将日冻结EEP区的数据写入EEP
 478   2                      gs_sys_globaL_var.work_mode = SLEEP_MODE;
 479   2      //              mem_db_write( ADR_METER_PARAM1_LOAD_PTR, (INT8U*)&LPRunPa.Ptr[0], LP_RunPara_Len,MEM_E2P1); //负荷记录
             -运行参数 
 480   2                      mem_db_write(ADR_METER_VAR_RTC, &gs_CurDateTime.Week,7,MEM_E2P1);       
 481   2                      
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 9   

 482   2                      gs_even_fun_var.into_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间传人ID - 0-6
 483   2                      api_deal_even_class_recode(ID_CLASS_II_PWN,START);      
 484   2              //电网类事件结束
 485   2                      //      gs_even_fun_var.into_cnt[ID_CLASS_II_NOL1-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 486   2                      //      gs_even_fun_var.esc_cnt[ID_CLASS_II_NOL1-ID_CLASS_II_min]=4;  // 事件保持时间
 487   2                      //      api_deal_even_class_recode(ID_CLASS_II_NOL1,END);
 488   2                      //      gs_even_fun_var.into_cnt[ID_CLASS_II_NOL2-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 489   2                      //      gs_even_fun_var.esc_cnt[ID_CLASS_II_NOL2-ID_CLASS_II_min]=4;  // 事件保持时间
 490   2                      //      api_deal_even_class_recode(ID_CLASS_II_NOL2,END);
 491   2                      gs_even_fun_var.into_cnt[ID_CLASS_II_L1reverse-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 492   2                      gs_even_fun_var.esc_cnt[ID_CLASS_II_L1reverse-ID_CLASS_II_min]=4;  // 事件保持时间
 493   2                      api_deal_even_class_recode(ID_CLASS_II_L1reverse,END);
 494   2                      //      gs_even_fun_var.into_cnt[ID_CLASS_II_L2reverse-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 495   2                      //      gs_even_fun_var.esc_cnt[ID_CLASS_II_L2reverse-ID_CLASS_II_min]=4;  // 事件保持时间
 496   2                      //      api_deal_even_class_recode(ID_CLASS_II_L2reverse,END);
 497   2      
 498   2                      mem_read(&gs_even_fun_var.even_fun_doingflg[ID_CLASS_II_COVER-ID_CLASS_II_min],ADR_CLASS2FLG_START_E2P+ 
             -(ID_CLASS_II_COVER-ID_CLASS_II_min)* LEN_CLASSII_flg,LEN_CLASSII_flg,MEM_E2P1);       
 499   2      //EEP操作在关闭IIC之前
 500   2                      api_check_current_energy_data();                //  初始化电量//
 501   2                      api_handl_dis_sleep();
 502   2                              
 503   2                      Init_GPIO_sleep();
 504   2      
 505   2                      //下翻按键      2019-01-18
 506   2                      P14FS = 0x00;
 507   2                      P1IE |= BIT4;//输入使能
 508   2                
 509   2                      E2p_IIC_Initail();
 510   2                      E2p_Stop_i2c();
 511   2                      api_Measure_ram_INIT();          //清除瞬时量 //
 512   2                      
 513   2      //              KEY_ERR_COVER_INITLIZE() ;              
 514   2      //              gs_even_fun_var.esc_cnt[ID_CLASS_II_COVER-ID_CLASS_II_min] =0; 
 515   2      //              gs_even_fun_var.into_cnt[ID_CLASS_II_COVER-ID_CLASS_II_min] =0;
 516   2      
 517   2                      gs_dis_ctl_var.keep_sec[0] = 0;//2019-01-18             cxy
 518   2                      d_flag = 0;
 519   2                      while(1)
 520   2                      {
 521   3                              CLRWDT();
 522   3                              SetExtRTC(0x01,0x00);//秒唤醒
 523   3                              IOWK|=BIT0;
 524   3                              Init_RTC();  
 525   3                              Set_McuSleep();
 526   3                              
 527   3                              //              
 528   3                              CLRWDT();
 529   3                              Set_McuClock(FSYSCLK_3M2); 
 530   3      //                      Proc_get_clock();
 531   3                              
 532   3                              //获取当前时间数据数据   //
 533   3                      Get_RTCTime(&rtc_data_tmp);
 534   3                              Lib_Copy_Str_TwoArry(&gs_CurDateTime.Week, &rtc_data_tmp.Week, 7);
 535   3      //                      if(Judge_ERR_COVER_key()==TRUE)
 536   3      //                              api_pwl_cover_even_class_recode(ID_CLASS_II_COVER-ID_CLASS_II_min,START);
 537   3      //                      else 
 538   3      //                              api_pwl_cover_even_class_recode(ID_CLASS_II_COVER-ID_CLASS_II_min,END);
 539   3                              
 540   3                              if((Systate&BIT0)==0x01)  
 541   3                              {
 542   4                                      Init_GPIO_run();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 10  

 543   4                                      E2p_IIC_Initail();
 544   4                                      E2p_Start_i2c();
 545   4                                      ////
 546   4                                      mem_write(ADR_BLOCK_4Energy_L0_E2P, &energy_data_array[0].buf[0], 5*LEN_EC_UNIT,MEM_E2P1);
 547   4                                      mem_write(ADR_BLOCK_4MMD_L0_E2P,&st_mmd_unit_array[0].buf[0],5*LEN_NEW_MMD_UNIT,MEM_E2P1);
 548   4                                      mem_write(ADR_BLOCK_4MMD_sum_L0_E2P,&sum_st_mmd_unit_array[0].buf[0],5*LEN_SUM_MMD_UNIT,MEM_E2P1);              
 549   4                              
 550   4      //                              mem_read(&Bill_Data, ADR_BLOCK20_METER_PARAM1_E2P+ST_MB_OFFSET(E2P_METER_PARAM1_MAP,BILL_FLAG), 1, M
             -EM_E2P1);
 551   4                                      /////
 552   4                              //      api_freeze_energy_pre_day();  
 553   4                                      sys_err();        //如果上电 //  
 554   4                              }
 555   3                              api_freeze_energy_Ram_pre_day();
 556   3                              
 557   3                              Proc_display_Power_down_process();                 
 558   3              }
 559   2              }
 560   1              else
 561   1              {
 562   2                      return;
 563   2              }
 564   1      }
 565          
 566          
 567          /****************************************************************
 568          Function:               void sys_err(void)
 569          Description:            系统错误后的看门狗复位处理
 570          Input:                  no
 571          Parameters:             no
 572          Returns:                        no                        
 573          Others:         
 574          ****************************************************************/
 575          void sys_err(void)
 576          {  
 577   1          CLRWDT();
 578   1      
 579   1          while(1)
 580   1          {
 581   2                      NOP();
 582   2                      NOP();
 583   2                      NOP();
 584   2          }  
 585   1      }
 586          
 587          
 588          
 589          /***************************************************************
 590          *    END
 591          ****************************************************************/
 592          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1414    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                04/11/2019 18:46:25 PAGE 11  


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
