C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE API_ADJERR
OBJECT MODULE PLACED IN .\Api_AdjErr.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S3_ApiPlat\Api_AdjErr.c LARGE BROWSE INCDIR(..\C_Source\S0_Syst
                    -em;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_ApiProtocol;
                    -..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_HardDrv\E2P
                    -_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Api_AdjErr.lst) OBJECT(.\Api_AdjErr.obj)

line level    source

   1          /*******************************************************************
   2          * Copyright (c) 2010
   3          * All rights reserved.
   4          * 
   5          * 文件名称：data.c
   6          * 摘    要：           
   7          *
   8          * 应用系统：
   9          *
  10          * 版本号：     v01.00            
  11          * 作者：          sosomj  
  12          * 完成日期：2010.08.12
  13          ****************************************************************/
  14          #include <MyIncludes_H.h>
  15          
  16          //**********************************************************************
  17          //*系统全局变量定义
  18          //**********************************************************************
  19          //struct AUTO_ERR_ADJ_VAR  gs_auto_err_adj_var;
  20          
  21          // ST_EMU_ADJ_VAR      gs_emu_adj_var;
  22          
  23          //增加
  24          // ST_EMU_ADJ_PARAM  gs_adj_emu_param;
  25          
  26          
  27          //const  ST_Adjust_CONST  code   cst_adj_const = 
  28          //{
  29          //    C_Un*10,        //uint32 U_ref;       //参比电压值，量纲0.1V  // 
  30          //    C_Ib*1000,     //uint32 I_ref;       //参比电流值，量纲0.001A  //     
  31          //    INITGATEP,     //uint32 GATEP;    // 计量门限值 //
  32          //    INITGATECP,   //uint32 C_GATECP;   // 潜动门限值 //
  33          //    REF_RMSPn,    // uint32 C_PCONST;   // 额定功率的校准后标准值//
  34          //    K_RMSP,         //float   Kim_Prms;          //有功功率有效值系数//   
  35          //};
  36          
  37          //-------------------------------------------------------------------------------//
  38          //  Function:      void get_default_mem_data(INT8U index)     
  39          //  Description:  根据数据区域获取默认数据
  40          //  Parameters:   无  
  41          //  Returns:        无                          
  42          //  Others:         
  43          //-------------------------------------------------------------------------------//
  44          //void  Proc_Auto_Err_Adj_Pre_sec(void)
  45          //{
  46              INT8U  u8_channel_fg;
  47          
  48          //    if(Judge_ERR_ADJ_key() == FALSE)
  49          //    {
  50          //        Initlize_Auto_Err_Adj_Var();
  51          //        return;
  52          //    }
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 2   

  53          
  54          //    if(gs_auto_err_adj_var.u8_flg == FLG_HAD_ERR_ADJ)   return;
  55          
  56          //    switch(gs_auto_err_adj_var.u8_sec_cnt)
  57          //    {
  58          //        case 0:
  59          //        case 1:
  60          //        case 2:
  61          //       case 3:         
  62          //            gs_auto_err_adj_var.u8_sec_cnt++;
  63          //        break;
  64          //        case 4:            // 添加功率读取判断校正点， 1.0IB 则先清比差//
  65          //              ADJ_Err_prepare();
  66          //             gs_auto_err_adj_var.u8_sec_cnt++;
  67          //      break;
  68          //        case SEC_INIT_ADJ_ERR:   //短接稳定时间到位后进行通道校表参数 初始化//
  69          //              ADJ_Err_Adj();
  70          //              gs_dis_ctl_var.mode = DIS_MODE_ADJ;
  71          //              gs_dis_ctl_var.keep_sec[4] = 5;
  72          //              gs_auto_err_adj_var.u8_flg = FLG_HAD_ERR_ADJ;
  73          //        break;
  74          //        default:
  75          //            Initlize_Auto_Err_Adj_Var();
  76          //        break;
  77          
  78          //    }
  79          
  80          //}
  81          
  82          //-------------------------------------------------------------------------------//
  83          //  Function:      void get_default_mem_data(INT8U index)     
  84          //  Description:  根据数据区域获取默认数据
  85          //  Parameters:   无  
  86          //  Returns:        无                          
  87          //  Others:         
  88          //-------------------------------------------------------------------------------//
  89          //INT8U  Judge_Auto_Err_Adj_Input_Data(INT8U u8_channel)
  90          //{
  91          //      if(u8_channel>2)  return(0) ;
  92          
  93          //      if(gs_auto_err_adj_var.u32_urms_tmp[u8_channel] >URMS_MAX)   return(0);
  94          //      if(gs_auto_err_adj_var.u32_urms_tmp[u8_channel] <URMS_MIN)   return(0);
  95          
  96          //    
  97          //      if(gs_auto_err_adj_var.u32_irms_tmp[u8_channel] >IRMS_MAX)   return(0);
  98          //      if(gs_auto_err_adj_var.u32_irms_tmp[u8_channel] <IRMS_MIN)   return(0);
  99          
 100          //      //if(gs_auto_err_adj_var.u32_prms_tmp[u8_channel] >PRMS_MAX)   return(0);
 101          //      //if(gs_auto_err_adj_var.u32_prms_tmp[u8_channel] <PRMS_MIN)   return(0);  
 102          //      
 103          //        return (1);
 104          //}
 105          
 106          
 107          //-------------------------------------------------------------------------------//
 108          //  Function:      void get_default_mem_data(INT8U index)     
 109          //  Description:  根据数据区域获取默认数据
 110          //  Parameters:   无  
 111          //  Returns:        无                          
 112          //  Others:         
 113          //-------------------------------------------------------------------------------//
 114          //void  Initlize_Auto_Err_Adj_Var(void)
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 3   

 115          //{
 116          //      gs_auto_err_adj_var.u8_flg = 0;
 117          //      gs_auto_err_adj_var.u8_sec_cnt = 0;
 118          
 119          
 120          //      gs_auto_err_adj_var.u32_urms_tmp[0] = 0;
 121          //      gs_auto_err_adj_var.u32_irms_tmp[0]  =  0;
 122          
 123          //}
 124          
 125          
 126          
 127          
 128          
 129          
 130          /*********************************************************************************************************
 131          ** 函数名称: Hardware_AdjustDiv_Sub
 132          ** 功能描述: 硬件短接 校准步骤判断
 133          ** 入口参数: 无
 134          ** 出口参数: 无
 135          ********************************************************************************************************/
 136          //void Hardware_AdjustDiv_Sub(void)
 137          //{
 138          //    uint8 i;
 139          //    uint32 val;
 140          //   uint32 tmpval;
 141          //   uint32 tmpval1=0;   
 142          //   uint32 jzwcval;
 143          //   uint8 ajust_type;
 144          //   uint32 cmp_val[4];
 145          //   uint32 adjust_wcval;
 146          
 147          //    if(EA==0)  return;
 148          
 149          //    //  准备阶段  ，获取功率值，判断进行哪一步的校表//
 150          //   gs_emu_adj_var.adj_flg = 0x55;     // =0X55 标识目前进入校表状态 //
 151          
 152          //    jzwcval=cst_adj_const.C_PCONST;     // 额定功率点的功率校准定点数据//
 153          //    cmp_val[0]=jzwcval*25/10;         //250% IB 基本校表点参数采用默认值初始化 //
 154          //    cmp_val[1]=jzwcval*70/100;       // 基本点校准 //
 155          //    cmp_val[2]=jzwcval*35/100;       // 角差校准 //
 156          //    cmp_val[3]=jzwcval*3/100;         // 小信号校准 //
 157          
 158          //    CLRWDT();                  
 159          // // 两路功率读取//
 160          //    adjust_wcval=Get_Original_Power(4,EMU_CH_L);       //读取实际功率
 161          //   // A 路校表状态获取// 
 162          //    if(adjust_wcval>cmp_val[0])
 163          //    {
 164          //        ajust_type=HARD_EADJ_STEP0_L_INITLIZE;//初始化 ch0;
 165          //    }
 166          //    else if(adjust_wcval>cmp_val[1])
 167          //    {
 168          //        ajust_type=HARD_EADJ_STEP1_L_100IB_100L;//IB 1.0 ch0;
 169          //    }
 170          //    else if(adjust_wcval>cmp_val[2])
 171          //    {
 172          //        ajust_type=HARD_EADJ_STEP2_L_100IB_50L;//IB 0.5 ch0;   
 173          //    }   
 174          //    else if(adjust_wcval>cmp_val[3])
 175          //    {
 176          //        ajust_type=HARD_EADJ_STEP3_L_5IB_100L;//5%IB 1.0 ch0;   
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 4   

 177          //    }
 178          
 179          //    //B 路校表状态获取//
 180          //    ReadRaccoonInt(DATAP,5,BPhy);     // 最大 200ms读取等待    //  理论时间76ms
 181          //    if( gs_sys_run.font_fg & BIT3_FONT_FG_readpower)
 182          //      {
 183          //          gs_sys_run.font_fg &= (~BIT3_FONT_FG_readpower) ;
 184          //          ReadbackABCPhy();   //功率、电压、电流、功率因素、频率获取//
 185          //      }
 186          //      else // 读取失败， 重新读取一次// 
 187          //      {
 188          //           ReadRaccoonInt(DATAP,5,BPhy);     
 189          //           gs_sys_run.font_fg &= (~BIT3_FONT_FG_readpower) ;
 190          //           ReadbackABCPhy();   //功率、电压、电流、功率因素、频率获取//
 191          //      }
 192          //              
 193          //        adjust_wcval = gs_measure_var_data.gs_really[1].dw_p_val.u32;  //读取实际功率
 194          //        // 状态获取//
 195          //        if(adjust_wcval>cmp_val[0])
 196          //        {
 197          //            ajust_type=HARD_EADJ_STEP4_N_INITLIZE;//初始化 1.0 ch0;
 198          //        }
 199          //        else if(adjust_wcval>cmp_val[1])
 200          //        {
 201          //            ajust_type=HARD_EADJ_STEP5_N_100IB_100L;//IB 1.0 ch1;
 202          //        }
 203          //        else if(adjust_wcval>cmp_val[2])
 204          //        {
 205          //            ajust_type=HARD_EADJ_STEP6_N_100IB_50L;//IB 0.5 ch1;     
 206          //        }   
 207          //        else if(adjust_wcval>cmp_val[3])
 208          //        {
 209          //            ajust_type=HARD_EADJ_STEP7_N_5IB_100L;//5%IB 1.0 ch1;   
 210          //        }
 211          //        else
 212          //        {
 213          //            ajust_type=HARD_EADJ_STEP8_METER_CLR;// 电表清零  //   
 214          //        }
 215          
 216          
 217          
 218          
 219          //    //   分步骤校准处理   //
 220          //    //  HARD_EADJ_STEP0_L_INITLIZE   L回路比差寄存器初始化//
 221          //    if(ajust_type==HARD_EADJ_STEP0_L_INITLIZE)
 222          //    {                      
 223          //        gs_adj_emu_param.w1gain = 0;   //初始化L1通道比差寄存器  //
 224          //        Save_EMU_AdjParam();
 225          //        Check_EMU_AdjParam();
 226          //        CLRWDT();
 227          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH1_0);   // 液晶显示 //
 228          //    }
 229          
 230          //    //  HARD_EADJ_STEP1_L_100IB_100L   L回路100%Ib, 1.0L 校准//
 231          //    if(ajust_type==HARD_EADJ_STEP1_L_100IB_100L)
 232          //    {                      
 233          //        //Dis_Adjust(1);  
 234          //        // L回路有功增益校准 // 
 235          //        SoftAdjust_IB_Process(jzwcval,EMU_CH_L); 
 236          
 237          //        // L回路电流有效值增益校准 //         
 238          //        tmpval=0;
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 5   

 239          //        for(i=0;i<8;i++)
 240          //        {
 241          //            Lib_Delay_ms(30);
 242          //            val = ReadMeterParaACK(RMSII1);
 243          //            if(val>=0x80000000)
 244          //            {
 245          //                val=~val+1;  
 246          //            }                                 
 247          //            tmpval=tmpval+val;
 248          //            CLRWDT();          
 249          //        }
 250          //        tmpval=tmpval/8;
 251          //        //电流有效值的位数在此处决定，取决于cst_adj_const.I_ref和基本电流整数的倍数//
 252          //        gs_adj_emu_param.i1rms_xs=(float)cst_adj_const.I_ref/(float)tmpval;  
 253          //        //电压有效值增益校准 //                       
 254          //        tmpval=0;
 255          //        for(i=0;i<8;i++)
 256          //        {
 257          //            Lib_Delay_ms(30);
 258          //            val = ReadMeterParaACK(RMSIU);
 259          //            if(val>=0x80000000)
 260          //            {
 261          //                val=~val+1;  
 262          //            }                                 
 263          //            tmpval=tmpval+val;
 264          //            CLRWDT();        
 265          //        }
 266          //        tmpval=tmpval/8;      
 267          //        //电压有效值的位数在此处决定，取决于cst_adj_const.U_ref和基本电压整数的倍数//
 268          //        gs_adj_emu_param.vrms_xs=(float)cst_adj_const.U_ref/(float)tmpval;  
 269          
 270          //        // L回路掉零线电压常量校准//  
 271          //        CLRWDT();            
 272          //        //Dis_Adjust(99);   //准备阶段    
 273          //        SoftAdjust_dlxProcess(jzwcval,EMU_CH_L);
 274          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH1_1);   // 液晶显示 //
 275          //    }
 276          
 277          //    //  HARD_EADJ_STEP2_L_100IB_50L   L回路100%Ib, 0.5L 校准//
 278          //    if(ajust_type==HARD_EADJ_STEP2_L_100IB_50L)
 279          //    {                            
 280          //        //Dis_Adjust(2);
 281          //        jzwcval=jzwcval/2;
 282          //        SoftAdjust_Phase_Process(jzwcval,EMU_CH_L);  
 283          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH1_2);   // 液晶显示 //
 284          //    }
 285          //    //  HARD_EADJ_STEP3_L_5IB_100L   L回路5%Ib, 1.0L 校准//
 286          //    if(ajust_type==HARD_EADJ_STEP3_L_5IB_100L)
 287          //    {                            
 288          //        //Dis_Adjust(3);
 289          //        jzwcval=jzwcval/20;
 290          //        SoftAdjust_IB5_Process(jzwcval,EMU_CH_L);   
 291          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH1_3);   // 液晶显示 //   
 292          //    }
 293          
 294          //    //  HARD_EADJ_STEP4_N_INITLIZE   N回路比差寄存器初始化//
 295          //    if(ajust_type==HARD_EADJ_STEP4_N_INITLIZE)
 296          //    {                      
 297          //        gs_adj_emu_param.w2gain = 0;   //初始化L1通道比差寄存器  //
 298          //        Save_EMU_AdjParam();
 299          //        Check_EMU_AdjParam();
 300          //        CLRWDT();
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 6   

 301          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH2_0);   // 液晶显示 //
 302          //    }
 303          
 304          //    //  HARD_EADJ_STEP4_N_100IB_100L   N回路100%Ib, 1.0L 校准//
 305          //    if(ajust_type==HARD_EADJ_STEP5_N_100IB_100L)
 306          //    {              
 307          //        //Dis_Adjust(1);  
 308          //        // L回路有功增益校准 // 
 309          //        SoftAdjust_IB_Process(jzwcval,EMU_CH_N); 
 310          
 311          //        // L回路电流有效值增益校准 //         
 312          //        tmpval=0;
 313          //        for(i=0;i<8;i++)
 314          //        {
 315          //            Lib_Delay_ms(30);
 316          //            val = ReadMeterParaACK(RMSII2);
 317          //            if(val>=0x80000000)
 318          //            {
 319          //                val=~val+1;  
 320          //            }                                 
 321          //            tmpval=tmpval+val;
 322          //            CLRWDT();          
 323          //        }
 324          //        tmpval=tmpval/8;
 325          //        //电流有效值的位数在此处决定，取决于cst_adj_const.I_ref和基本电流整数的倍数//
 326          //        gs_adj_emu_param.i2rms_xs=(float)cst_adj_const.I_ref/(float)tmpval;  
 327          
 328          //        // N回路掉零线电压常量校准//  
 329          //        CLRWDT();            
 330          //        //Dis_Adjust(99);   //准备阶段    
 331          //        SoftAdjust_dlxProcess(jzwcval,EMU_CH_N);
 332          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH2_1);   // 液晶显示 //
 333          //    }
 334          
 335          //    //  HARD_EADJ_STEP6_N_100IB_50L   N回路100%Ib, 0.5L 校准//
 336          //    if(ajust_type==HARD_EADJ_STEP6_N_100IB_50L)
 337          //    {                      
 338          //        //Dis_Adjust(5);
 339          //        jzwcval=jzwcval/2;
 340          //        SoftAdjust_Phase_Process(jzwcval,EMU_CH_N);  
 341          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH2_2);   // 液晶显示 //
 342          //    }    
 343          //    //  HARD_EADJ_STEP7_N_5IB_100L   N回路5%Ib, 1.0L 校准//
 344          //    if(ajust_type==HARD_EADJ_STEP7_N_5IB_100L)
 345          //    {                         
 346          //        //Dis_Adjust(6);
 347          //        jzwcval=jzwcval/20;
 348          //        SoftAdjust_IB5_Process(jzwcval,EMU_CH_N);   
 349          //        api_chg_LCDDisplay_adj_item(DIS_ADJ_CH2_3);   // 液晶显示 //   
 350          //    }
 351          
 352          //    if(ajust_type==HARD_EADJ_STEP8_METER_CLR)
 353          //    {        
 354          //        Proc_clr_meter();
 355          //        api_chg_LCDDisplay_adj_item(DIS_DATA_CLR);   // 液晶显示 //
 356          //    }
 357          
 358          //    gs_emu_adj_var.adj_flg =0;   // =0X0 标识目前退出校表状态 //      
 359          
 360          //}
 361          
 362          
C51 COMPILER V9.01   API_ADJERR                                                            04/10/2019 09:17:43 PAGE 7   

 363          /*--------------------------------------------------------------*/
 364          //end of file
 365          /*--------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
