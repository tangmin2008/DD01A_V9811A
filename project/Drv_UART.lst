C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DRV_UART
OBJECT MODULE PLACED IN .\Drv_UART.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S1_HardDrv\V9811A_MCU\Drv_UART.c LARGE BROWSE INCDIR(..\C_Sourc
                    -e\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_Api
                    -Protocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_Ha
                    -rdDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Drv_UART.lst) OBJECT(.\Drv_UART.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Drv_UART.c
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : UART模块的硬件驱动C代码
   9          **note                  : V9811A ，MERTER FOR DL03C
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          
  22          UART_DRV_VAR gs_uart_drv_var[UART_CH_NUM];
  23          
  24          
  25          /*******************************************************************************************
  26          ** 函数名称: Set_Uart2_badu
  27          ** 功能描述: UART2波特率配置
  28          ** 入口参数: u16 badu：串口波特率，双字节16进制数据
  29          ** 出口参数: 无
  30          ** 说明    : 
  31          *******************************************************************************************/
  32          void Set_Uart2_badu(uint16 rate)
  33          {
  34   1          TMOD2 = 0x20;                               // 8-bit counter with auto-reload
  35   1          switch(rate)
  36   1          {
  37   2              case BPS600:
  38   2      #if(FSYSCLK==FSYSCLK_3M2)
  39   2              TCON2 = 0x82;
  40   2      #if(C_Fq == 60)
  41   2              TL21=TH21=0xDE;  
  42   2      #endif
  43   2      #if(C_Fq == 50)
                      TL21=TH21=0xE4;  
              #endif
  46   2      #endif
  47   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0x82;           
              #if(C_Fq == 60)
                      TL21=TH21=0xBC;  
              #endif
              #if(C_Fq == 50)
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 2   

                      TL21=TH21=0xC7;  
              #endif
              #endif
  56   2              break;
  57   2      
  58   2              case BPS1200:
  59   2      #if(FSYSCLK==FSYSCLK_3M2)
  60   2              TCON2 = 0x82;
  61   2      #if(C_Fq == 60)
  62   2              TL21=TH21=0xEF;  
  63   2      #endif
  64   2      #if(C_Fq == 50)
                      TL21=TH21=0xF2;  
              #endif
  67   2      #endif
  68   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0x82;           
              #if(C_Fq == 60)
                      TL21=TH21=0xDE;  
              #endif
              #if(C_Fq == 50)
                      TL21=TH21=0xE4;  
              #endif
              #endif
  77   2              break;
  78   2      
  79   2              case BPS2400:
  80   2      #if(FSYSCLK==FSYSCLK_3M2)
  81   2              TCON2 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
  82   2      #if(C_Fq == 60)
  83   2              TL21=TH21=0x9A;  
  84   2      #endif
  85   2      #if(C_Fq == 50)
                      TL21=TH21=0xAB;  
              #endif
  88   2      #endif
  89   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0xA2;           
              #if(C_Fq == 60)
                      TL21=TH21=0x34;  
              #endif
              #if(C_Fq == 50)
                      TL21=TH21=0x56;  
              #endif
              #endif
  98   2              break;
  99   2      
 100   2              case BPS4800:
 101   2      
 102   2      #if(FSYSCLK==FSYSCLK_3M2)
 103   2              TCON2 = 0xA2;
 104   2      #if(C_Fq == 60)
 105   2              TL21=TH21=0xCD;  
 106   2      #endif
 107   2      #if(C_Fq == 50)
                      TL21=TH21=0xD5;  
              #endif
 110   2      #endif
 111   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0xA2;           
              #if (C_Fq == 60)
                      TL21=TH21=0x9A;  
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 3   

              #endif
              #if(C_Fq == 50)
                      TL21=TH21=0xAB;  
              #endif
              #endif
 120   2              break;
 121   2      
 122   2              case BPS9600:
 123   2      #if(FSYSCLK==FSYSCLK_3M2)
 124   2             TCON2 = 0xA2;
 125   2      #if(C_Fq == 60)
 126   2              TL21=TH21=0xe7;  
 127   2      #endif
 128   2      #if(C_Fq == 50)
                      TL21=TH21=0xEB;  
              #endif
 131   2      #endif
 132   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0xA2;           
              #if(C_Fq == 60)
                      TL21=TH21=0xCD;  
              #endif
              #if(C_Fq == 50)
                      TL21=TH21=0xD5;  
              #endif
              #endif
 141   2              break;
 142   2              case BPS300:
 143   2              default:        // 300
 144   2      #if(FSYSCLK==FSYSCLK_3M2)
 145   2              TCON2 = 0x82;                           //波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
 146   2      #if(C_Fq == 60)
 147   2              TL21=TH21=0xBE;  
 148   2      #endif
 149   2      #if(C_Fq == 50)
                      TL21=TH21=0xC7;  
              #endif
 152   2      #endif
 153   2      #if(FSYSCLK==FSYSCLK_6M5)
                      TCON2 = 0x82;           
              #if(C_Fq == 60)
                      TL21=TH21=0x78;  
              #endif
              #if(C_Fq == 50)
                      TL21=TH21=0X8E;  
              #endif
              #endif
 162   2              break;
 163   2      
 164   2          }
 165   1      
 166   1      }
 167          
 168          
 169          /*******************************************************************************************
 170          ** 函数名称: Set_Uart4_badu
 171          ** 功能描述: UART4波特率配置
 172          ** 入口参数: u16 badu：串口波特率，双字节16进制数据
 173          ** 出口参数: 无
 174          ** 说明    : 
 175          *******************************************************************************************/
 176          void Set_Uart4_badu(uint16 rate)
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 4   

 177          {
 178   1          TMOD4 = 0x20;                               // 8-bit counter with auto-reload
 179   1          switch(rate)
 180   1          {
 181   2              case BPS600:
 182   2                      #if(FSYSCLK==FSYSCLK_3M2)
 183   2                              TCON4 = 0x22;                           //波特率不加倍 //波特率发生器时钟源clk 作为时钟源/
 184   2                              #if (C_Fq == 60)
 185   2                                      TL41=TH41=0x33;  
 186   2                              #else
                                              TL41=TH41=0x55;  
                                      #endif
 189   2                      #endif
 190   2                      #if(FSYSCLK==FSYSCLK_6M5)
                                      TCON4 = 0x82;                           //波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
                                      #if (C_Fq == 60)
                                              TL41=TH41=0xBC;  
                                      #else
                                              TL41=TH41=0xC7;  
                                      #endif
                              #endif
 198   2              break;
 199   2      
 200   2              case BPS1200:
 201   2                      #if(FSYSCLK==FSYSCLK_3M2)
 202   2                      TCON4 = 0x82;//波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
 203   2                              #if (C_Fq == 60)
 204   2                                      TL41=TH41=0xEF;  
 205   2                              #else
                                              TL41=TH41=0xF2;  
                                      #endif
 208   2                      #endif
 209   2                      #if(FSYSCLK==FSYSCLK_6M5)
                                      TCON4 = 0x82;//波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
                                      #if (C_Fq == 60)
                                              TL41=TH41=0xDE;  
                                      #else
                                              TL41=TH41=0xE4;  
                                      #endif
                              #endif
 217   2              break;
 218   2      
 219   2              case BPS2400:
 220   2                      #if(FSYSCLK==FSYSCLK_3M2)
 221   2                      TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
 222   2                              #if (C_Fq == 60)
 223   2                                      TL41=TH41=0x9A;  
 224   2                              #else
                                              TL41=TH41=0xAB;  
                                      #endif
 227   2                      #endif
 228   2                      #if(FSYSCLK==FSYSCLK_6M5)
                              TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
                                      #if (C_Fq == 60)
                                      TL41=TH41=0x33;  
                                      #else
                                      TL41=TH41=0x55;  
                                      #endif
                              #endif
 236   2              break;
 237   2      
 238   2              case BPS4800:
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 5   

 239   2                      #if(FSYSCLK==FSYSCLK_3M2)
 240   2                              TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
 241   2                              #if (C_Fq == 60)
 242   2                                      TL41=TH41=0xCD;  
 243   2                              #else
                                              TL41=TH41=0xD5;  
                                      #endif
 246   2                      #endif
 247   2                      #if(FSYSCLK==FSYSCLK_6M5)
                                      TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
                                      #if (C_Fq == 60)
                                              TL41=TH41=0x9A;  
                                      #else
                                              TL41=TH41=0xAB;  
                                      #endif
                              #endif                  
 255   2              break;
 256   2      
 257   2              case BPS9600:
 258   2                      #if(FSYSCLK==FSYSCLK_3M2)
 259   2                              TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
 260   2                              #if (C_Fq == 60)
 261   2                                      TL41=TH41=0xE6;  
 262   2                              #else
                                              TL41=TH41=0xEB;  
                                      #endif
 265   2                      #endif  
 266   2                      #if(FSYSCLK==FSYSCLK_6M5)
                                      TCON4 = 0xA2;           //波特率加倍 //波特率发生器时钟源clk 作为时钟源//波特率发生器的启动
                                      #if (C_Fq == 60)
                                              TL41=TH41=0xCD;  
                                      #else
                                              TL41=TH41=0xD5;  
                                      #endif
                              #endif                  
 274   2              break;
 275   2              case BPS300:
 276   2              default:        // 300
 277   2                      #if(FSYSCLK==FSYSCLK_3M2)
 278   2                              TCON4 = 0x82;                           //波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
 279   2                              #if (C_Fq == 60)
 280   2                                      TL41=TH41=0xBC;  
 281   2                              #else
                                              TL41=TH41=0xC7;  
                                      #endif
 284   2                      #endif
 285   2                      #if(FSYSCLK==FSYSCLK_6M5)
                                      TCON4 = 0x82;                           //波特率加倍 //波特率发生器时钟源clk/12 作为时钟源/
                                      #if (C_Fq == 60)
                                              TL41=TH41=0x77;  
                                      #else
                                              TL41=TH41=0x8E;  
                                      #endif
                              #endif
 293   2              break;
 294   2      
 295   2          }
 296   1      
 297   1      }
 298          
 299          
 300          
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 6   

 301          /*******************************************************************************************
 302          ** 函数名称: Dis_UART0_rx
 303          ** 功能描述: UART2串口接收禁止
 304          ** 入口参数: NO
 305          ** 出口参数: NO
 306          ** 说明    : 
 307          *******************************************************************************************/
 308          void En_UART2_rx(void)
 309          {
 310   1          UART2_INITLIZE_ON(); 
 311   1          SCON2 = 0x50;        //8 位 UART，波特率由波特率发生器决定。  接收使能//
 312   1          ExInt2IFG &= ~(BIT0+BIT1);                  
 313   1          ExInt2IE&=~BIT0;            //取消发送中断 //
 314   1          ExInt2IE|=BIT1;             //接收中断 en
 315   1          EIE|=BIT0;
 316   1      }
 317          
 318          /*******************************************************************************************
 319          ** 函数名称: Dis_UART0_rx
 320          ** 功能描述: UART0串口接收禁止
 321          ** 入口参数: NO
 322          ** 出口参数: NO
 323          ** 说明    : 
 324          *******************************************************************************************/
 325          /*void En_UART4_rx(void)
 326          {
 327              UART4_INITLIZE_ON();      
 328          //   SCON4 = 0x50;        //8 位 UART，波特率由波特率发生器决定。  接收使能  62056//
 329              SCON4=0xD0;                                 //数据位9位,8位数据位+1校验位// 9260+07
 330              ExInt2IFG &= ~(BIT2+BIT3);                  
 331              ExInt2IE&=~BIT2;            //发送中断dis
 332              ExInt2IE|=BIT3;             //接收中断 en
 333              EIE|=BIT0;
 334          }
 335          */
 336          void En_UART4_rx(void)
 337          {
 338   1       /*   SCON4=0xD0;                                 //数据位9位,8位数据位+1校验位// 9260+07
 339   1      //    P2OE &= ~BIT1;                      //Uart4发送口输出允许
 340   1      //    P2IE &= ~BIT1;                      //Uart4发送口输入禁止
 341   1      //    P2OE |= BIT0;                       //Uart4接收口输出禁止
 342   1      //    P2IE |= BIT0;                       //Uart4接收口输入允许
 343   1          P20FS=2;                            //P2.0配置成RXD
 344   1          P21FS=2;                            //P2.1配置成TXD
 345   1          EIP|=BIT0;
 346   1              
 347   1          ExInt2IE|=BIT2;
 348   1          ExInt2IE|=BIT3;
 349   1          EIE|=BIT0;
 350   1          ExInt2IFG&=(~BIT2);       //清中断标志
 351   1          ExInt2IFG&=(~BIT3);
 352   1          */
 353   1          
 354   1               UART4_INITLIZE_ON(); 
 355   1               SCON4 = 0x50;            //8 位 UART，波特率由波特率发生器决定。  接收使能//
 356   1               ExInt2IFG &= ~(BIT2+BIT3);              
 357   1               ExInt2IE&=~BIT2;                //取消发送中断 //
 358   1               ExInt2IE|=BIT3;         //接收中断 en
 359   1               EIE|=BIT0;
 360   1      }
 361          
 362          /*******************************************************************************************
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 7   

 363          ** 函数名称: Dis_UART0_rx
 364          ** 功能描述: UART0串口接收禁止
 365          ** 入口参数: NO
 366          ** 出口参数: NO
 367          ** 说明    : 
 368          *******************************************************************************************/
 369          void Dis_UART2_rx(void)
 370          {
 371   1          ExInt2IE &= ~BIT1;   //关闭串口接收中断//
 372   1      }
 373          
 374          /*******************************************************************************************
 375          ** 函数名称: Dis_UART0_rx
 376          ** 功能描述: UART0串口接收禁止
 377          ** 入口参数: NO
 378          ** 出口参数: NO
 379          ** 说明    : 
 380          *******************************************************************************************/
 381          void Dis_UART4_rx(void)
 382          {
 383   1          ExInt2IE&=~BIT3;            //发送中断dis 
 384   1      }
 385          
 386          /*******************************************************************************************
 387          ** 函数名称: Dis_UART0_rx
 388          ** 功能描述: UART0串口接收禁止
 389          ** 入口参数: NO
 390          ** 出口参数: NO
 391          ** 说明    : 
 392          *******************************************************************************************/
 393          void En_UART2_Tx(void)
 394          {
 395   1          ExInt2IFG &= ~(BIT0+BIT1);                  
 396   1          ExInt2IE |=BIT0;            //开放发送中断 //
 397   1          ExInt2IE &= ~BIT1;   //关闭串口接收中断//
 398   1          EIE|=BIT0;          //开放中断向量8  //
 399   1        //  UART2_PWM38K_EN();
 400   1      }
 401          
 402          
 403          /*******************************************************************************************
 404          ** 函数名称: Dis_UART0_rx
 405          ** 功能描述: UART0串口接收禁止
 406          ** 入口参数: NO
 407          ** 出口参数: NO
 408          ** 说明    : 
 409          *******************************************************************************************/
 410          void En_UART4_Tx(void)
 411          {
 412   1          ExInt2IFG &= ~(BIT2+BIT3);                  
 413   1          ExInt2IE |=BIT2;            //开放发送中断 //
 414   1          ExInt2IE &= ~BIT3;   //关闭串口接收中断//
 415   1          EIE|=BIT0;          //开放中断向量8  //
 416   1      }
 417          
 418          
 419          
 420          /*******************************************************************************************
 421          ** 函数名称: Init_UART0_hard
 422          ** 功能描述: UART0串口硬件初始化
 423          ** 入口参数: u16 badu：串口波特率，双字节16进制数据
 424          **           u16 bits_len: 通讯字节位数格式，8或7
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 8   

 425          ** 出口参数: 无
 426          ** 说明    : 
 427          *******************************************************************************************/
 428          void Init_UART2_hard(uint16 badu)
 429          {
 430   1           
 431   1          Set_Uart2_badu(badu);
 432   1          En_UART2_rx();
 433   1      
 434   1      }
 435          
 436          /*******************************************************************************************
 437          ** 函数名称: Init_UART0_hard
 438          ** 功能描述: UART0串口硬件初始化
 439          ** 入口参数: u16 badu：串口波特率，双字节16进制数据
 440          **           u16 bits_len: 通讯字节位数格式，8或7
 441          ** 出口参数: 无
 442          ** 说明    : 
 443          *******************************************************************************************/
 444          void Init_UART4_hard(uint16 badu)
 445          {
 446   1           
 447   1          Set_Uart4_badu(badu);
 448   1          En_UART4_rx();
 449   1      
 450   1      }
 451          
 452          
 453          /*******************************************************************************************
 454          ** 函数名称: Init_UART_soft
 455          ** 功能描述: UART[X]通道软件初始化
 456          ** 入口参数: uint8 ch: 通道序号X
 457          ** 出口参数: 无
 458          ** 说明    : 
 459          *******************************************************************************************/
 460          void Init_UART_soft(uint8 ch)
 461          {
 462   1      uint8 i;
 463   1          //init mem
 464   1          if(ch > UART_CH_INDEX_MAX )  return ;
 465   1      
 466   1          
 467   1          gs_uart_drv_var[ch].tx_len = 0;                             //COMM_485_TX_LEN = 0 ;
 468   1          gs_uart_drv_var[ch].buff_index = 0;                 //COMM_485_BUFF_INDEX = 0 ;
 469   1          gs_uart_drv_var[ch].buff_index_back = 0;    //COMM_485_BUFF_INDEX_BAK = 0 ;
 470   1          gs_uart_drv_var[ch].rx_over_ticks = 0;              //COMM_485_RX_OVERTIME_TICKS = 0 ;
 471   1          gs_uart_drv_var[ch].status = UART_STATUS_IDLE;              //COMM_485_RX_OVERTIME_TICKS = 0 ;
 472   1          gs_uart_drv_var[ch].bits_len = 7;           //COMM_485_RX_OVERTIME_TICKS = 0 ;
 473   1          for (i=0; i<UART_BUFF_SIZE; i++)
 474   1          {
 475   2              gs_uart_drv_var[ch].buff[i]=0;    
 476   2          }
 477   1      }
 478          
 479          /*******************************************************************************************
 480          ** 函数名称: Hdl_UART_10ms_run
 481          ** 功能描述: UART[X]通道每10ms处理
 482          ** 入口参数: uint8 ch: 通道序号X
 483          ** 出口参数: 无
 484          ** 说明    : 
 485          *******************************************************************************************/
 486          void Hdl_UART_10ms_run(uint8 ch)
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 9   

 487          {
 488   1          uint8 rx_len ;
 489   1      
 490   1              if(ch > UART_CH_INDEX_MAX )  return ;
 491   1      
 492   1          // 串口发送状态时，溢出定时寄存器不累加      //
 493   1          if (gs_uart_drv_var[ch].tx_len != 0)
 494   1          {
 495   2              gs_uart_drv_var[ch].rx_over_ticks = 0 ;
 496   2              return ;
 497   2          }
 498   1      
 499   1          //发送和发送结束状态有效时不接收数据 //
 500   1          if (gs_uart_drv_var[ch].status ==UART_STATUS_BUSY_TX)
 501   1          {
 502   2              gs_uart_drv_var[ch].rx_over_ticks = 0 ;
 503   2              return ;
 504   2          }
 505   1          
 506   1          if (gs_uart_drv_var[ch].status ==UART_STATUS_BUSY_TX_OVER)
 507   1          {
 508   2              if(ch==UART_CH0_IR)
 509   2              {
 510   3                  En_UART4_rx();
 511   3              }
 512   2              if(ch==CH_RF)
 513   2              {
 514   3                //  En_UART4_rx();  通道兼容9260F 禁止操作串口
 515   3                nop();
 516   3              }
 517   2              Init_UART_soft(ch);
 518   2              return ;
 519   2          }
 520   1      
 521   1      
 522   1          // 未接收到数据时，溢出定时寄存器不累加     //
 523   1          rx_len = gs_uart_drv_var[ch].buff_index     ;
 524   1          if (rx_len == 0)
 525   1          {
 526   2              gs_uart_drv_var[ch].rx_over_ticks = 0 ;
 527   2              return ;
 528   2          }
 529   1      
 530   1          gs_uart_drv_var[ch].status = UART_STATUS_BUSY_RX;
 531   1          // 接收到数据时，如果接收数据溢出     定时寄存器不累加     //
 532   1          if (rx_len ==gs_uart_drv_var[ch].buff_index_back)
 533   1          {
 534   2              gs_uart_drv_var[ch].rx_over_ticks++;
 535   2          }
 536   1          else
 537   1          {
 538   2              gs_uart_drv_var[ch].rx_over_ticks = 0 ;         
 539   2          }
 540   1          gs_uart_drv_var[ch].buff_index_back = rx_len;
 541   1      
 542   1      
 543   1      }
 544          
 545          
 546          /*******************************************************************************************
 547          ** 函数名称: Tx_UART_frist
 548          ** 功能描述: UART[X]通道发送首字节处理函数
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 10  

 549          ** 入口参数: uint8 *p_buf: 发送数据通道的缓存区首地址
 550          **           uint8 len : 发送数据字节长度   
 551          **           uint16 badu: 串口发送波特率
 552          **           uint8 ch   : 串口通道号
 553          ** 出口参数: 无
 554          ** 说明    : 
 555          *******************************************************************************************/
 556          void Tx_UART_frist (uint8 *p_buf, uint8 len,uint16 badu,uint8 ch)
 557          {    
 558   1          uint8 i ;
 559   1          uint8 bits_len;
 560   1      
 561   1      
 562   1          bits_len = 7;  //代表7位数据位 //
 563   1          //
 564   1          if (len > UART_BUFF_SIZE)
 565   1          {
 566   2          len = UART_BUFF_SIZE ;
 567   2          }
 568   1      
 569   1          if(ch > UART_CH_INDEX_MAX )  return ;
 570   1          
 571   1          for (i=0; i<len; i++)
 572   1          {
 573   2              gs_uart_drv_var[ch].buff[i] = p_buf[i] ;
 574   2          }  
 575   1          gs_uart_drv_var[ch].tx_len = len-1;
 576   1          gs_uart_drv_var[ch].buff_index = 1;
 577   1          gs_uart_drv_var[ch].buff_index_back = 0;
 578   1          gs_uart_drv_var[ch].status = UART_STATUS_BUSY_TX;
 579   1      
 580   1          if(ch==UART_CH0_IR)
 581   1          {
 582   2                      DisableINT(); 
 583   2              if(gs_uart_drv_var[ch].bits_len==7)
 584   2              {
 585   3              // 7位数据处理方式 //
 586   3                  ACC=(gs_uart_drv_var[ch].buff[0] &0x7F);
 587   3                  if(P)
 588   3                  {
 589   4                      gs_uart_drv_var[ch].buff[0] |= BIT7;
 590   4                  }
 591   3                  else
 592   3                  {
 593   4                      gs_uart_drv_var[ch].buff[0] &= ~BIT7;
 594   4                  }
 595   3              }
 596   2              EnableINT();
 597   2              Set_Uart4_badu(badu);// 波特率切换
 598   2              Dis_UART4_rx();
 599   2              En_UART4_Tx();
 600   2              SBUF4=gs_uart_drv_var[ch].buff[0];   
 601   2          }
 602   1      
 603   1          if(ch==CH_RF)
 604   1          {
 605   2             G_LoRaConfig.PayloadLength = len;
 606   2                 SX1276_TxPacket(&gs_uart_drv_var[ch].buff[0]);                    //发送数据
 607   2                 Rx_mode(); 
 608   2             gs_uart_drv_var[CH_RF].buff_index = 0;
 609   2             gs_uart_drv_var[CH_RF].status = UART_STATUS_BUSY_TX_OVER;   
 610   2             gs_uart_drv_var[CH_RF].tx_len =0 ;
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 11  

 611   2          }
 612   1      
 613   1             
 614   1      
 615   1      }
 616          
 617          
 618          /*******************************************************************************************
 619          ** 函数名称: Get_UART_rx_buff
 620          ** 功能描述: 获取UART[X]通道接收的数据首地址和长度
 621          ** 入口参数: uint8 **p_buf: 用来返回接收数据的首地址数据
 622          **           uint8 ch   : 串口通道号
 623          ** 出口参数: uint8 len : 接收数据长度
 624          ** 说明    : 
 625          *******************************************************************************************/
 626          uint8 Get_UART_rx_buff (uint8 **p_buf,uint8 ch)
 627          {
 628   1          uint8 len ;
 629   1          
 630   1              if(ch > UART_CH_INDEX_MAX )  return 0;
 631   1          //
 632   1      
 633   1              *p_buf = &gs_uart_drv_var[ch].buff[0] ;
 634   1          
 635   1          //recv...
 636   1          if(gs_uart_drv_var[ch].rx_over_ticks <10)  //此处延时参数为判断数据接收结束的时间，需要配合时可以调整1
             -50ms  //
 637   1          {
 638   2              return 0;
 639   2          }
 640   1      
 641   1           // recv ok    
 642   1          gs_uart_drv_var[ch].rx_over_ticks = 0;
 643   1          gs_uart_drv_var[ch].status = UART_STATUS_BUSY_RX_OVER;
 644   1      
 645   1          if(ch==UART_CH0_IR)
 646   1          {
 647   2              //close recv
 648   2              Dis_UART4_rx () ;
 649   2          }
 650   1      
 651   1          if(ch==CH_RF)
 652   1          {
 653   2              //close recv
 654   2           // Dis_UART4_rx () ;通道兼容9260F 禁止操作串口
 655   2           nop();
 656   2          }
 657   1          //
 658   1          len = gs_uart_drv_var[ch].buff_index;
 659   1          gs_uart_drv_var[ch].buff_index = 0;
 660   1          gs_uart_drv_var[ch].buff_index_back = 0;
 661   1      
 662   1          if(len >UART_BUFF_SIZE)
 663   1          {
 664   2              len = UART_BUFF_SIZE;
 665   2          }
 666   1          
 667   1          return len ;
 668   1      }
 669          
 670          
 671          
C51 COMPILER V9.01   DRV_UART                                                              04/08/2019 10:12:10 PAGE 12  

 672          void Uart4_Transmit(void)
 673          {
 674   1          uint8 i;
 675   1          if(gs_RacCtrl.ucStatus==Rac_Send)
 676   1          {
 677   2            if(gs_RacCtrl.ucSendPoint<gs_RacCtrl.ucSendLen)   
 678   2            {
 679   3              i=Lib_check_bitnum(gs_RacCtrl.ucBuf[gs_RacCtrl.ucSendPoint]);            //发送奇校验位
 680   3              if(i==0)
 681   3              {    
 682   4                SCON4 |=0x08;                        //偶校验的值  0x1906的bit3 1
 683   4              }
 684   3              else
 685   3              {    
 686   4                SCON4 &=0xf7;                  //奇校验的值  0x1906的bit3 0
 687   4              }
 688   3              SBUF4 = gs_RacCtrl.ucBuf[gs_RacCtrl.ucSendPoint++];
 689   3            }
 690   2            else
 691   2            {
 692   3              gs_RacCtrl.ucStatus=Rac_Rev;  
 693   3            }
 694   2          }
 695   1      }
 696          
 697          /*******************************************************************************************
 698          **    END
 699          *******************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1594    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    258      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
