C51 COMPILER V9.01   API_RELAY                                                             04/08/2019 10:12:15 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE API_RELAY
OBJECT MODULE PLACED IN .\API_Relay.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S3_ApiPlat\API_Relay.c LARGE BROWSE INCDIR(..\C_Source\S0_Syste
                    -m;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source\S5_ApiProtocol;.
                    -.\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Source\S1_HardDrv\E2P_
                    -24CXXX) DEBUG OBJECTEXTEND PRINT(.\API_Relay.lst) OBJECT(.\API_Relay.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name: API_Relay.c
   6          **Author: maji
   7          **date: 
   8          **description: c code for 磁保持继电器操作
   9          **note: memer type  DI03B
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2017-09-06   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          /*********************************************************************************************************
  21          **  全局变量区
  22          ********************************************************************************************************/
  23          RELAY_MANAGE_VAR_TYPE gs_relay_manage_var;
  24          
  25          /*********************************************************************************************************
  26          **  常量数组表区
  27          ********************************************************************************************************/
  28          
  29          
  30          
  31          /*********************************************************************************************************
  32          **  代码区   start
  33          ********************************************************************************************************/
  34          
  35          
  36          
  37          
  38          /*****************************************************************************
  39          ** Function name    :void Drv_relay_run_check(void)
  40          **
  41          ** Description      :继电器命令检查处理
  42          **
  43          ** Parameters       :NONE  
  44          **
  45          ** Returned value       :NONE
  46          **
  47          ** Note             :1 本函数在主循环中进行调用，可以实现对继电器状态的检查
  48          **                  :2 
  49          **----------------------------------------------------------------------------
  50          ** V01.01  MJ  2017-09-15
  51          ******************************************************************************/
  52          void Drv_relay_run_check(void)
C51 COMPILER V9.01   API_RELAY                                                             04/08/2019 10:12:15 PAGE 2   

  53          {
  54   1      //      if((gs_relay_manage_var.u8_CMD==CMD_RELAY_OFF)&&( gs_relay_manage_var.u8_STA !=CMD_RELAY_OFF )) 
  55   1      //      {
  56   1      //              //合闸操作 //
  57   1      //              if(gs_relay_manage_var.u8_tmr_opera == 0)
  58   1      //              {
  59   1      //                      CTL_Relay_OFF(); 
  60   1      //                      gs_relay_manage_var.u8_tmr_opera = TMR_OPERA_RELAY;
  61   1      //                      //等待中断处理延时  //
  62   1      //                      while(gs_relay_manage_var.u8_tmr_opera!=0)
  63   1      //                      {
  64   1      //                              
  65   1      //                      }
  66   1      //                      CTL_Relay_FREE() ;
  67   1      //                      Lib_Delay_ms(20);  //此处的延时是为了确保合闸动作后的电源恢复，避免下次继电器动作间隔太小导致电源不足
             - //
  68   1      //                      //更改状态并保存   //
  69   1      //                      gs_relay_manage_var.u8_STA = CMD_RELAY_OFF;
  70   1      //                      mem_db_write(ADR_METER_PARAM1_RELAY_CMD, &gs_relay_manage_var.u8_CMD, 2, MEM_E2P1);
  71   1      //                      api_deal_even_class_recode(ID_CLASS_I_RELAY_OFF,START);  //生成合闸事件记录 //
  72   1      //              }
  73   1      //      }
  74   1      //      else if((gs_relay_manage_var.u8_CMD==CMD_RELAY_ON)&&( gs_relay_manage_var.u8_STA !=CMD_RELAY_ON )) 
  75   1      //      {
  76   1      //              //拉闸操作 //
  77   1      //              if(gs_relay_manage_var.u8_tmr_opera == 0)
  78   1      //              {
  79   1      //                      CTL_Relay_ON(); 
  80   1      //                      gs_relay_manage_var.u8_tmr_opera = TMR_OPERA_RELAY;
  81   1      //                      //等待中断处理延时  //
  82   1      //                      while(gs_relay_manage_var.u8_tmr_opera!=0)
  83   1      //                      {
  84   1      //                              
  85   1      //                      }
  86   1      //                      CTL_Relay_FREE() ;
  87   1      //                      Lib_Delay_ms(20);  //此处的延时是为了确保合闸动作后的电源恢复，避免下次继电器动作间隔太小导致电源不足
             - //
  88   1      //                      //更改状态并保存   //                   
  89   1      //                      gs_relay_manage_var.u8_STA = CMD_RELAY_ON;
  90   1      //                      mem_db_write(ADR_METER_PARAM1_RELAY_CMD, &gs_relay_manage_var.u8_CMD, 2, MEM_E2P1);             
  91   1      //                      api_deal_even_class_recode(ID_CLASS_I_RELAY_ON,START);  //生成拉闸事件记录 //
  92   1      //              }                       
  93   1      //      }
  94   1      //      else
  95   1      //      {
  96   1      //              return;
  97   1      //      }
  98   1      
  99   1      }
 100          
 101          
 102          /*****************************************************************************
 103          ** Function name    :void Drv_relay_powerup_check(void)
 104          **
 105          ** Description      :电能表上电初始化处理继电器程序
 106          **
 107          ** Parameters       :NONE
 108          **
 109          ** Returned value       :NONE
 110          **
 111          ** Note             :1 初始化电能表先合闸，是为了可靠性考虑，在继电器故障时可以通过上下电恢复
 112          **                  :2 注意，本函数只被上电初始化调用
C51 COMPILER V9.01   API_RELAY                                                             04/08/2019 10:12:15 PAGE 3   

 113          **----------------------------------------------------------------------------
 114          ** V01.01  MJ  2017-09-15
 115          ******************************************************************************/
 116          void Drv_relay_powerup_check(void)
 117          {
 118   1              //1 硬件IO口初始化  //
 119   1              PIN_Relay_INITLIZE();
 120   1              CTL_Relay_FREE() ;
 121   1              Lib_Delay_ms(100);  //此处的延时是为了确保合闸动作前的电源稳定延时 //
 122   1      
 123   1              //上电预合闸  //
 124   1              CTL_Relay_OFF(); 
 125   1              Lib_Delay_ms(80);       
 126   1              CTL_Relay_FREE();
 127   1      
 128   1              //相关变量初始化  //
 129   1              mem_read( &gs_relay_manage_var.u8_CMD, ADR_METER_PARAM1_RELAY_CMD, 2, MEM_E2P1);
 130   1              gs_relay_manage_var.u8_STA =CMD_RELAY_OFF;//上电默认为合闸状态
 131   1              //读取继电器拉合闸发生的命令，若不是通讯引起的拉合闸，而是其他原因引起，///
 132   1              //例如超负荷等引起的拉闸，上电自动合闸处理 yang 2017-12-22////
 133   1              if((gs_relay_manage_var.u8_CMD != CMD_RELAY_OFF) &&(gs_relay_manage_var.u8_CMD != CMD_RELAY_ON))   
 134   1              {
 135   2                      gs_relay_manage_var.u8_STA =CMD_RELAY_OFF;
 136   2                      mem_db_write(ADR_METER_PARAM1_RELAY_CMD, &gs_relay_manage_var.u8_CMD, 2, MEM_E2P1);
 137   2              }
 138   1              gs_relay_manage_var.u8_tmr_opera =0;
 139   1              Lib_Delay_ms(100);  //此处的延时是为了确保合闸动作后的电源恢复，避免下次继电器动作间隔太小导致电源不足 //
 140   1          CLRWDT();   // 清看门狗//
 141   1      }
 142          
 143          
 144          
 145          
 146          /*****************************************************************************
 147          ** Function name    :INT8U Drv_relay_COMM_CMD_operating(INT8U *ptr_cmd)
 148          **
 149          ** Description      :通讯处理层调用本函数处理继电器操作指令
 150          **
 151          ** Parameters       :INT8U *ptr_cmd 通讯缓存区内的控制数据，2字节内容首地址   
 152          **
 153          ** Returned value       :INT8U,命令控制数据检查不合法返回失败
 154          **
 155          ** Note             :1 本函数只修改RAM区变量数据，不对继电器座实际操作
 156          **                  :2 注意，本函数只被通讯处理程序调用
 157          **----------------------------------------------------------------------------
 158          ** V01.01  MJ  2017-09-15
 159          ******************************************************************************/
 160          INT8U Drv_relay_COMM_CMD_operating(INT8U *ptr_cmd)
 161          {
 162   1              INT8U u8_cmd,u8_sta;
 163   1              
 164   1              u8_cmd = *ptr_cmd;
 165   1              u8_sta =  *(ptr_cmd+1);
 166   1      
 167   1                              
 168   1              //输入命令数据判断  //
 169   1              if(u8_cmd != u8_sta )  return FALSE;    //数据格式不对  //
 170   1      
 171   1              if(u8_cmd ==CMD_RELAY_OFF )
 172   1                      {
 173   2                      //通讯合闸命令,强制系统合闸     //
 174   2                      gs_relay_manage_var.u8_CMD = CMD_RELAY_OFF;
C51 COMPILER V9.01   API_RELAY                                                             04/08/2019 10:12:15 PAGE 4   

 175   2                      gs_relay_manage_var.u8_STA = CMD_RELAY_ON;
 176   2                      gs_relay_manage_var.u8_tmr_opera = 0;
 177   2                      Drv_relay_run_check();   //继电器检查操作  //
 178   2                      }
 179   1              else if(u8_cmd ==CMD_RELAY_ON)
 180   1                      {
 181   2                      //通讯合闸命令  ,强制系统合闸//
 182   2                      gs_relay_manage_var.u8_CMD = CMD_RELAY_ON;
 183   2                      gs_relay_manage_var.u8_STA = CMD_RELAY_OFF;
 184   2                      gs_relay_manage_var.u8_tmr_opera = 0;
 185   2                      Drv_relay_run_check();  //继电器检查操作  //
 186   2                      }
 187   1              else
 188   1                      {
 189   2                              return FALSE;   
 190   2                      }
 191   1              
 192   1          CLRWDT();   // 清看门狗//
 193   1              return TRUE;
 194   1      }
 195          
 196          
 197          
 198          /*******************************************************************
 199          *
 200          *  end of file                                    
 201          *
 202          *******************************************************************/
 203          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    222    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
